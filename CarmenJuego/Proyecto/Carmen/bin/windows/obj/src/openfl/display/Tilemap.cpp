// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_lime__backend_native_NativeGLRenderContext
#include <lime/_backend/native/NativeGLRenderContext.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_graphics_RendererType
#include <lime/graphics/RendererType.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo_Cairo
#include <lime/graphics/cairo/Cairo.h>
#endif
#ifndef INCLUDED_lime_graphics_cairo__CairoPattern_CairoPattern_Impl_
#include <lime/graphics/cairo/_CairoPattern/CairoPattern_Impl_.h>
#endif
#ifndef INCLUDED_lime_graphics_opengl_GLObject
#include <lime/graphics/opengl/GLObject.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_ObjectPool_openfl_geom_Rectangle
#include <lime/utils/ObjectPool_openfl_geom_Rectangle.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoDisplayObject
#include <openfl/_internal/renderer/cairo/CairoDisplayObject.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_cairo_CairoTilemap
#include <openfl/_internal/renderer/cairo/CairoTilemap.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_dom_DOMTilemap
#include <openfl/_internal/renderer/dom/DOMTilemap.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLBitmap
#include <openfl/_internal/renderer/opengl/GLBitmap.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLShape
#include <openfl/_internal/renderer/opengl/GLShape.h>
#endif
#ifndef INCLUDED_openfl__internal_renderer_opengl_GLTilemap
#include <openfl/_internal/renderer/opengl/GLTilemap.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_CairoRenderer
#include <openfl/display/CairoRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_CanvasRenderer
#include <openfl/display/CanvasRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DOMRenderer
#include <openfl/display/DOMRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectRenderer
#include <openfl/display/DisplayObjectRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_ITileContainer
#include <openfl/display/ITileContainer.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_OpenGLRenderer
#include <openfl/display/OpenGLRenderer.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_display_Tile
#include <openfl/display/Tile.h>
#endif
#ifndef INCLUDED_openfl_display_TileContainer
#include <openfl/display/TileContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Tilemap
#include <openfl/display/Tilemap.h>
#endif
#ifndef INCLUDED_openfl_display_Tileset
#include <openfl/display/Tileset.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_filters_BitmapFilter
#include <openfl/filters/BitmapFilter.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1cbb708783dfd99e_79_new,"openfl.display.Tilemap","new",0x34c22ff6,"openfl.display.Tilemap.new","openfl/display/Tilemap.hx",79,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_105_addTile,"openfl.display.Tilemap","addTile",0xfbdef085,"openfl.display.Tilemap.addTile","openfl/display/Tilemap.hx",105,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_112_addTileAt,"openfl.display.Tilemap","addTileAt",0xe5e014d8,"openfl.display.Tilemap.addTileAt","openfl/display/Tilemap.hx",112,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_119_addTiles,"openfl.display.Tilemap","addTiles",0x6733844e,"openfl.display.Tilemap.addTiles","openfl/display/Tilemap.hx",119,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_126_contains,"openfl.display.Tilemap","contains",0x0a1cbac9,"openfl.display.Tilemap.contains","openfl/display/Tilemap.hx",126,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_133_getTileAt,"openfl.display.Tilemap","getTileAt",0xaa12690d,"openfl.display.Tilemap.getTileAt","openfl/display/Tilemap.hx",133,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_140_getTileIndex,"openfl.display.Tilemap","getTileIndex",0x74b69338,"openfl.display.Tilemap.getTileIndex","openfl/display/Tilemap.hx",140,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_178_getTiles,"openfl.display.Tilemap","getTiles",0x4dad6db9,"openfl.display.Tilemap.getTiles","openfl/display/Tilemap.hx",178,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_186_removeTile,"openfl.display.Tilemap","removeTile",0x5b5664bc,"openfl.display.Tilemap.removeTile","openfl/display/Tilemap.hx",186,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_193_removeTileAt,"openfl.display.Tilemap","removeTileAt",0xa94644cf,"openfl.display.Tilemap.removeTileAt","openfl/display/Tilemap.hx",193,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_200_removeTiles,"openfl.display.Tilemap","removeTiles",0x9041c037,"openfl.display.Tilemap.removeTiles","openfl/display/Tilemap.hx",200,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_207_setTileIndex,"openfl.display.Tilemap","setTileIndex",0x89afb6ac,"openfl.display.Tilemap.setTileIndex","openfl/display/Tilemap.hx",207,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_264_setTiles,"openfl.display.Tilemap","setTiles",0xfc0ac72d,"openfl.display.Tilemap.setTiles","openfl/display/Tilemap.hx",264,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_276_swapTiles,"openfl.display.Tilemap","swapTiles",0x95754208,"openfl.display.Tilemap.swapTiles","openfl/display/Tilemap.hx",276,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_283_swapTilesAt,"openfl.display.Tilemap","swapTilesAt",0xced00d1b,"openfl.display.Tilemap.swapTilesAt","openfl/display/Tilemap.hx",283,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_291___enterFrame,"openfl.display.Tilemap","__enterFrame",0x56d37cbf,"openfl.display.Tilemap.__enterFrame","openfl/display/Tilemap.hx",291,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_302___getBounds,"openfl.display.Tilemap","__getBounds",0x92793e21,"openfl.display.Tilemap.__getBounds","openfl/display/Tilemap.hx",302,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_317___hitTest,"openfl.display.Tilemap","__hitTest",0x7360e53b,"openfl.display.Tilemap.__hitTest","openfl/display/Tilemap.hx",317,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_344___renderCairo,"openfl.display.Tilemap","__renderCairo",0xab509548,"openfl.display.Tilemap.__renderCairo","openfl/display/Tilemap.hx",344,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_366___renderCanvas,"openfl.display.Tilemap","__renderCanvas",0x3e831818,"openfl.display.Tilemap.__renderCanvas","openfl/display/Tilemap.hx",366,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_386___renderDOM,"openfl.display.Tilemap","__renderDOM",0x7d5cdb42,"openfl.display.Tilemap.__renderDOM","openfl/display/Tilemap.hx",386,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_411___renderDOMClear,"openfl.display.Tilemap","__renderDOMClear",0xfc3ff6eb,"openfl.display.Tilemap.__renderDOMClear","openfl/display/Tilemap.hx",411,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_419___renderFlash,"openfl.display.Tilemap","__renderFlash",0x6cc39a70,"openfl.display.Tilemap.__renderFlash","openfl/display/Tilemap.hx",419,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_425___renderGL,"openfl.display.Tilemap","__renderGL",0xe74e7d45,"openfl.display.Tilemap.__renderGL","openfl/display/Tilemap.hx",425,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_445___renderGLMask,"openfl.display.Tilemap","__renderGLMask",0xaaa670d1,"openfl.display.Tilemap.__renderGLMask","openfl/display/Tilemap.hx",445,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_465___shouldCacheHardware,"openfl.display.Tilemap","__shouldCacheHardware",0x4211accd,"openfl.display.Tilemap.__shouldCacheHardware","openfl/display/Tilemap.hx",465,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_470___updateCacheBitmap,"openfl.display.Tilemap","__updateCacheBitmap",0xcd407cbe,"openfl.display.Tilemap.__updateCacheBitmap","openfl/display/Tilemap.hx",470,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_500_get_height,"openfl.display.Tilemap","get_height",0x840dd6da,"openfl.display.Tilemap.get_height","openfl/display/Tilemap.hx",500,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_507_set_height,"openfl.display.Tilemap","set_height",0x878b754e,"openfl.display.Tilemap.set_height","openfl/display/Tilemap.hx",507,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_530_get_numTiles,"openfl.display.Tilemap","get_numTiles",0x9e4ec312,"openfl.display.Tilemap.get_numTiles","openfl/display/Tilemap.hx",530,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_537_get_tileset,"openfl.display.Tilemap","get_tileset",0x4d66c6e1,"openfl.display.Tilemap.get_tileset","openfl/display/Tilemap.hx",537,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_542_set_tileset,"openfl.display.Tilemap","set_tileset",0x57d3cded,"openfl.display.Tilemap.set_tileset","openfl/display/Tilemap.hx",542,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_563_get_width,"openfl.display.Tilemap","get_width",0x1d9f4673,"openfl.display.Tilemap.get_width","openfl/display/Tilemap.hx",563,0xd55dffbc)
HX_LOCAL_STACK_FRAME(_hx_pos_1cbb708783dfd99e_570_set_width,"openfl.display.Tilemap","set_width",0x00f0327f,"openfl.display.Tilemap.set_width","openfl/display/Tilemap.hx",570,0xd55dffbc)
namespace openfl{
namespace display{

void Tilemap_obj::__construct(int width,int height, ::openfl::display::Tileset tileset,hx::Null< bool >  __o_smoothing){
bool smoothing = __o_smoothing.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_1cbb708783dfd99e_79_new)
HXLINE(  81)		super::__construct();
HXLINE(  83)		this->_hx___tileset = tileset;
HXLINE(  84)		this->smoothing = smoothing;
HXLINE(  86)		this->tileAlphaEnabled = true;
HXLINE(  87)		this->tileColorTransformEnabled = true;
HXLINE(  89)		this->_hx___group =  ::openfl::display::TileContainer_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null());
HXLINE(  92)		this->_hx___width = width;
HXLINE(  93)		this->_hx___height = height;
            	}

Dynamic Tilemap_obj::__CreateEmpty() { return new Tilemap_obj; }

void *Tilemap_obj::_hx_vtable = 0;

Dynamic Tilemap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Tilemap_obj > _hx_result = new Tilemap_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool Tilemap_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x099f8de4) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x099f8de4;
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		return inClassId==(int)0x1b123bf8;
	}
}

static ::openfl::display::ITileContainer_obj _hx_openfl_display_Tilemap__hx_openfl_display_ITileContainer= {
	( int (hx::Object::*)())&::openfl::display::Tilemap_obj::get_numTiles,
	(  ::openfl::display::Tile (hx::Object::*)( ::openfl::display::Tile))&::openfl::display::Tilemap_obj::addTile,
	(  ::openfl::display::Tile (hx::Object::*)( ::openfl::display::Tile,int))&::openfl::display::Tilemap_obj::addTileAt,
	( ::Array< ::Dynamic> (hx::Object::*)(::Array< ::Dynamic>))&::openfl::display::Tilemap_obj::addTiles,
	( bool (hx::Object::*)( ::openfl::display::Tile))&::openfl::display::Tilemap_obj::contains,
	(  ::openfl::display::Tile (hx::Object::*)(int))&::openfl::display::Tilemap_obj::getTileAt,
	( int (hx::Object::*)( ::openfl::display::Tile))&::openfl::display::Tilemap_obj::getTileIndex,
	(  ::openfl::display::Tile (hx::Object::*)( ::openfl::display::Tile))&::openfl::display::Tilemap_obj::removeTile,
	(  ::openfl::display::Tile (hx::Object::*)(int))&::openfl::display::Tilemap_obj::removeTileAt,
	( void (hx::Object::*)(hx::Null< int > ,hx::Null< int > ))&::openfl::display::Tilemap_obj::removeTiles,
	( void (hx::Object::*)( ::openfl::display::Tile,int))&::openfl::display::Tilemap_obj::setTileIndex,
	( void (hx::Object::*)( ::openfl::display::Tile, ::openfl::display::Tile))&::openfl::display::Tilemap_obj::swapTiles,
	( void (hx::Object::*)(int,int))&::openfl::display::Tilemap_obj::swapTilesAt,
};

void *Tilemap_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xcad54adc: return &_hx_openfl_display_Tilemap__hx_openfl_display_ITileContainer;
	}
	return super::_hx_getInterface(inHash);
}

 ::openfl::display::Tile Tilemap_obj::addTile( ::openfl::display::Tile tile){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_105_addTile)
HXDLIN( 105)		return this->_hx___group->addTile(tile);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,addTile,return )

 ::openfl::display::Tile Tilemap_obj::addTileAt( ::openfl::display::Tile tile,int index){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_112_addTileAt)
HXDLIN( 112)		return this->_hx___group->addTileAt(tile,index);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tilemap_obj,addTileAt,return )

::Array< ::Dynamic> Tilemap_obj::addTiles(::Array< ::Dynamic> tiles){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_119_addTiles)
HXDLIN( 119)		return this->_hx___group->addTiles(tiles);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,addTiles,return )

bool Tilemap_obj::contains( ::openfl::display::Tile tile){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_126_contains)
HXDLIN( 126)		return this->_hx___group->contains(tile);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,contains,return )

 ::openfl::display::Tile Tilemap_obj::getTileAt(int index){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_133_getTileAt)
HXDLIN( 133)		return this->_hx___group->getTileAt(index);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,getTileAt,return )

int Tilemap_obj::getTileIndex( ::openfl::display::Tile tile){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_140_getTileIndex)
HXDLIN( 140)		return this->_hx___group->getTileIndex(tile);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,getTileIndex,return )

 ::openfl::display::TileContainer Tilemap_obj::getTiles(){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_178_getTiles)
HXDLIN( 178)		return Dynamic( this->_hx___group->clone()).StaticCast<  ::openfl::display::TileContainer >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tilemap_obj,getTiles,return )

 ::openfl::display::Tile Tilemap_obj::removeTile( ::openfl::display::Tile tile){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_186_removeTile)
HXDLIN( 186)		return this->_hx___group->removeTile(tile);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,removeTile,return )

 ::openfl::display::Tile Tilemap_obj::removeTileAt(int index){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_193_removeTileAt)
HXDLIN( 193)		return this->_hx___group->removeTileAt(index);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,removeTileAt,return )

void Tilemap_obj::removeTiles(hx::Null< int >  __o_beginIndex,hx::Null< int >  __o_endIndex){
int beginIndex = __o_beginIndex.Default(0);
int endIndex = __o_endIndex.Default(2147483647);
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_200_removeTiles)
HXDLIN( 200)		this->_hx___group->removeTiles(beginIndex,endIndex);
HXDLIN( 200)		return;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tilemap_obj,removeTiles,(void))

void Tilemap_obj::setTileIndex( ::openfl::display::Tile tile,int index){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_207_setTileIndex)
HXDLIN( 207)		this->_hx___group->setTileIndex(tile,index);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tilemap_obj,setTileIndex,(void))

void Tilemap_obj::setTiles( ::openfl::display::TileContainer group){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_264_setTiles)
HXDLIN( 264)		int _g = (int)0;
HXDLIN( 264)		::Array< ::Dynamic> _g1 = group->_hx___tiles;
HXDLIN( 264)		while((_g < _g1->length)){
HXDLIN( 264)			 ::openfl::display::Tile tile = _g1->__get(_g).StaticCast<  ::openfl::display::Tile >();
HXDLIN( 264)			_g = (_g + (int)1);
HXLINE( 266)			this->addTile(tile);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,setTiles,(void))

void Tilemap_obj::swapTiles( ::openfl::display::Tile tile1, ::openfl::display::Tile tile2){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_276_swapTiles)
HXDLIN( 276)		this->_hx___group->swapTiles(tile1,tile2);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tilemap_obj,swapTiles,(void))

void Tilemap_obj::swapTilesAt(int index1,int index2){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_283_swapTilesAt)
HXDLIN( 283)		this->_hx___group->swapTilesAt(index1,index2);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Tilemap_obj,swapTilesAt,(void))

void Tilemap_obj::_hx___enterFrame(int deltaTime){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_291___enterFrame)
HXDLIN( 291)		if (this->_hx___group->_hx___dirty) {
HXLINE( 293)			if (!(this->_hx___renderDirty)) {
HXLINE( 293)				this->_hx___renderDirty = true;
HXDLIN( 293)				this->_hx___setParentRenderDirty();
            			}
            		}
            	}


void Tilemap_obj::_hx___getBounds( ::openfl::geom::Rectangle rect, ::openfl::geom::Matrix matrix){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_302___getBounds)
HXLINE( 304)		 ::openfl::geom::Rectangle bounds = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXLINE( 305)		bounds->setTo((int)0,(int)0,this->_hx___width,this->_hx___height);
HXLINE( 306)		bounds->_hx___transform(bounds,matrix);
HXLINE( 308)		rect->_hx___expand(bounds->x,bounds->y,bounds->width,bounds->height);
HXLINE( 310)		::openfl::geom::Rectangle_obj::_hx___pool->release(bounds);
            	}


bool Tilemap_obj::_hx___hitTest(Float x,Float y,bool shapeFlag,::Array< ::Dynamic> stack,bool interactiveOnly, ::openfl::display::DisplayObject hitObject){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_317___hitTest)
HXLINE( 319)		bool _hx_tmp;
HXDLIN( 319)		if (!(!(hitObject->get_visible()))) {
HXLINE( 319)			_hx_tmp = this->_hx___isMask;
            		}
            		else {
HXLINE( 319)			_hx_tmp = true;
            		}
HXDLIN( 319)		if (_hx_tmp) {
HXLINE( 319)			return false;
            		}
HXLINE( 320)		bool _hx_tmp1;
HXDLIN( 320)		if (hx::IsNotNull( this->get_mask() )) {
HXLINE( 320)			_hx_tmp1 = !(this->get_mask()->_hx___hitTestMask(x,y));
            		}
            		else {
HXLINE( 320)			_hx_tmp1 = false;
            		}
HXDLIN( 320)		if (_hx_tmp1) {
HXLINE( 320)			return false;
            		}
HXLINE( 322)		this->_hx___getRenderTransform();
HXLINE( 324)		 ::openfl::geom::Matrix _this = this->_hx___renderTransform;
HXDLIN( 324)		Float norm = (_this->a * _this->d);
HXDLIN( 324)		Float norm1 = (norm - (_this->b * _this->c));
HXDLIN( 324)		Float px;
HXDLIN( 324)		if ((norm1 == (int)0)) {
HXLINE( 324)			px = -(_this->tx);
            		}
            		else {
HXLINE( 324)			Float _this1 = _this->c;
HXDLIN( 324)			Float px1 = (_this1 * (_this->ty - y));
HXDLIN( 324)			Float _this2 = _this->d;
HXDLIN( 324)			px = (((Float)((Float)1.0) / (Float)norm1) * (px1 + (_this2 * (x - _this->tx))));
            		}
HXLINE( 325)		 ::openfl::geom::Matrix _this3 = this->_hx___renderTransform;
HXDLIN( 325)		Float norm2 = (_this3->a * _this3->d);
HXDLIN( 325)		Float norm3 = (norm2 - (_this3->b * _this3->c));
HXDLIN( 325)		Float py;
HXDLIN( 325)		if ((norm3 == (int)0)) {
HXLINE( 325)			py = -(_this3->ty);
            		}
            		else {
HXLINE( 325)			Float _this4 = _this3->a;
HXDLIN( 325)			Float py1 = (_this4 * (y - _this3->ty));
HXDLIN( 325)			Float _this5 = _this3->b;
HXDLIN( 325)			py = (((Float)((Float)1.0) / (Float)norm3) * (py1 + (_this5 * (_this3->tx - x))));
            		}
HXLINE( 327)		bool _hx_tmp2;
HXDLIN( 327)		bool _hx_tmp3;
HXDLIN( 327)		bool _hx_tmp4;
HXDLIN( 327)		if ((px > (int)0)) {
HXLINE( 327)			_hx_tmp4 = (py > (int)0);
            		}
            		else {
HXLINE( 327)			_hx_tmp4 = false;
            		}
HXDLIN( 327)		if (_hx_tmp4) {
HXLINE( 327)			_hx_tmp3 = (px <= this->_hx___width);
            		}
            		else {
HXLINE( 327)			_hx_tmp3 = false;
            		}
HXDLIN( 327)		if (_hx_tmp3) {
HXLINE( 327)			_hx_tmp2 = (py <= this->_hx___height);
            		}
            		else {
HXLINE( 327)			_hx_tmp2 = false;
            		}
HXDLIN( 327)		if (_hx_tmp2) {
HXLINE( 329)			bool _hx_tmp5;
HXDLIN( 329)			if (hx::IsNotNull( stack )) {
HXLINE( 329)				_hx_tmp5 = !(interactiveOnly);
            			}
            			else {
HXLINE( 329)				_hx_tmp5 = false;
            			}
HXDLIN( 329)			if (_hx_tmp5) {
HXLINE( 330)				stack->push(hitObject);
            			}
HXLINE( 333)			return true;
            		}
HXLINE( 337)		return false;
            	}


void Tilemap_obj::_hx___renderCairo( ::openfl::display::CairoRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_344___renderCairo)
HXLINE( 347)		this->_hx___updateCacheBitmap(renderer,!(this->_hx___worldColorTransform->_hx___isDefault()));
HXLINE( 349)		bool _hx_tmp;
HXDLIN( 349)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 349)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 349)			_hx_tmp = false;
            		}
HXDLIN( 349)		if (_hx_tmp) {
HXLINE( 351)			 ::openfl::display::Bitmap bitmap = this->_hx___cacheBitmap;
HXDLIN( 351)			if (!(!(bitmap->_hx___renderable))) {
HXLINE( 351)				Float alpha = renderer->_hx___getAlpha(bitmap->_hx___worldAlpha);
HXDLIN( 351)				bool _hx_tmp1;
HXDLIN( 351)				bool _hx_tmp2;
HXDLIN( 351)				if ((alpha > (int)0)) {
HXLINE( 351)					_hx_tmp2 = hx::IsNotNull( bitmap->_hx___bitmapData );
            				}
            				else {
HXLINE( 351)					_hx_tmp2 = false;
            				}
HXDLIN( 351)				if (_hx_tmp2) {
HXLINE( 351)					_hx_tmp1 = bitmap->_hx___bitmapData->_hx___isValid;
            				}
            				else {
HXLINE( 351)					_hx_tmp1 = false;
            				}
HXDLIN( 351)				if (_hx_tmp1) {
HXLINE( 351)					 ::lime::graphics::cairo::Cairo cairo = renderer->cairo;
HXDLIN( 351)					renderer->_hx___setBlendMode(bitmap->_hx___worldBlendMode);
HXDLIN( 351)					renderer->_hx___pushMaskObject(bitmap,null());
HXDLIN( 351)					renderer->applyMatrix(bitmap->_hx___renderTransform,cairo);
HXDLIN( 351)					 ::Dynamic surface = bitmap->_hx___bitmapData->getSurface();
HXDLIN( 351)					if (hx::IsNotNull( surface )) {
HXLINE( 351)						 ::Dynamic pattern = ::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::createForSurface(surface);
HXDLIN( 351)						int _hx_tmp3;
HXDLIN( 351)						bool _hx_tmp4;
HXDLIN( 351)						if (renderer->_hx___allowSmoothing) {
HXLINE( 351)							_hx_tmp4 = bitmap->smoothing;
            						}
            						else {
HXLINE( 351)							_hx_tmp4 = false;
            						}
HXDLIN( 351)						if (_hx_tmp4) {
HXLINE( 351)							_hx_tmp3 = (int)1;
            						}
            						else {
HXLINE( 351)							_hx_tmp3 = (int)3;
            						}
HXDLIN( 351)						::lime::graphics::cairo::_CairoPattern::CairoPattern_Impl__obj::set_filter(pattern,_hx_tmp3);
HXDLIN( 351)						cairo->set_source(pattern);
HXDLIN( 351)						if ((alpha == (int)1)) {
HXLINE( 351)							cairo->paint();
            						}
            						else {
HXLINE( 351)							cairo->paintWithAlpha(alpha);
            						}
            					}
HXDLIN( 351)					renderer->_hx___popMaskObject(bitmap,null());
            				}
            			}
            		}
            		else {
HXLINE( 355)			::openfl::_internal::renderer::cairo::CairoDisplayObject_obj::render(hx::ObjectPtr<OBJ_>(this),renderer);
HXLINE( 356)			::openfl::_internal::renderer::cairo::CairoTilemap_obj::render(hx::ObjectPtr<OBJ_>(this),renderer);
            		}
HXLINE( 360)		this->_hx___renderEvent(renderer);
            	}


void Tilemap_obj::_hx___renderCanvas( ::openfl::display::CanvasRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_366___renderCanvas)
HXLINE( 368)		this->_hx___updateCacheBitmap(renderer,!(this->_hx___worldColorTransform->_hx___isDefault()));
HXLINE( 370)		bool _hx_tmp;
HXDLIN( 370)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 370)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 370)			_hx_tmp = false;
            		}
HXDLIN( 370)		if (_hx_tmp) {
HXLINE( 372)			 ::openfl::display::Bitmap bitmap = this->_hx___cacheBitmap;
            		}
HXLINE( 381)		this->_hx___renderEvent(renderer);
            	}


void Tilemap_obj::_hx___renderDOM( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_386___renderDOM)
HXLINE( 388)		this->_hx___updateCacheBitmap(renderer,!(this->_hx___worldColorTransform->_hx___isDefault()));
HXLINE( 390)		bool _hx_tmp;
HXDLIN( 390)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 390)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 390)			_hx_tmp = false;
            		}
HXDLIN( 390)		if (_hx_tmp) {
HXLINE( 392)			this->_hx___renderDOMClear(renderer);
HXLINE( 393)			this->_hx___cacheBitmap->stage = this->stage;
HXLINE( 395)			 ::openfl::display::Bitmap bitmap = this->_hx___cacheBitmap;
            		}
HXLINE( 404)		this->_hx___renderEvent(renderer);
            	}


void Tilemap_obj::_hx___renderDOMClear( ::openfl::display::DOMRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_411___renderDOMClear)
HXDLIN( 411)		::openfl::_internal::renderer::dom::DOMTilemap_obj::clear(hx::ObjectPtr<OBJ_>(this),renderer);
            	}


void Tilemap_obj::_hx___renderFlash(){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_419___renderFlash)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tilemap_obj,_hx___renderFlash,(void))

void Tilemap_obj::_hx___renderGL( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_425___renderGL)
HXLINE( 427)		this->_hx___updateCacheBitmap(renderer,false);
HXLINE( 429)		bool _hx_tmp;
HXDLIN( 429)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 429)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 429)			_hx_tmp = false;
            		}
HXDLIN( 429)		if (_hx_tmp) {
HXLINE( 431)			::openfl::_internal::renderer::opengl::GLBitmap_obj::render(this->_hx___cacheBitmap,renderer);
            		}
            		else {
HXLINE( 435)			bool _hx_tmp1;
HXDLIN( 435)			if (hx::IsNull( this->opaqueBackground )) {
HXLINE( 435)				_hx_tmp1 = hx::IsNull( this->_hx___graphics );
            			}
            			else {
HXLINE( 435)				_hx_tmp1 = false;
            			}
HXDLIN( 435)			if (!(_hx_tmp1)) {
HXLINE( 435)				bool _hx_tmp2;
HXDLIN( 435)				if (!(!(this->_hx___renderable))) {
HXLINE( 435)					_hx_tmp2 = (this->_hx___worldAlpha <= (int)0);
            				}
            				else {
HXLINE( 435)					_hx_tmp2 = true;
            				}
HXDLIN( 435)				if (!(_hx_tmp2)) {
HXLINE( 435)					bool _hx_tmp3;
HXDLIN( 435)					bool _hx_tmp4;
HXDLIN( 435)					bool _hx_tmp5;
HXDLIN( 435)					if (hx::IsNotNull( this->opaqueBackground )) {
HXLINE( 435)						_hx_tmp5 = !(this->_hx___isCacheBitmapRender);
            					}
            					else {
HXLINE( 435)						_hx_tmp5 = false;
            					}
HXDLIN( 435)					if (_hx_tmp5) {
HXLINE( 435)						_hx_tmp4 = (this->get_width() > (int)0);
            					}
            					else {
HXLINE( 435)						_hx_tmp4 = false;
            					}
HXDLIN( 435)					if (_hx_tmp4) {
HXLINE( 435)						_hx_tmp3 = (this->get_height() > (int)0);
            					}
            					else {
HXLINE( 435)						_hx_tmp3 = false;
            					}
HXDLIN( 435)					if (_hx_tmp3) {
HXLINE( 435)						renderer->_hx___setBlendMode(this->_hx___worldBlendMode);
HXDLIN( 435)						renderer->_hx___pushMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 435)						 ::lime::_backend::native::NativeGLRenderContext gl = renderer->_hx___gl;
HXDLIN( 435)						 ::openfl::geom::Rectangle rect = ::openfl::geom::Rectangle_obj::_hx___pool->get();
HXDLIN( 435)						Float _hx_tmp6 = this->get_width();
HXDLIN( 435)						rect->setTo((int)0,(int)0,_hx_tmp6,this->get_height());
HXDLIN( 435)						renderer->_hx___pushMaskRect(rect,this->_hx___renderTransform);
HXDLIN( 435)						int color = this->opaqueBackground;
HXDLIN( 435)						gl->clearColor(((Float)((int)hx::UShr(color,(int)16) & (int)(int)255) / (Float)(int)255),((Float)((int)hx::UShr(color,(int)8) & (int)(int)255) / (Float)(int)255),((Float)((int)color & (int)(int)255) / (Float)(int)255),(int)1);
HXDLIN( 435)						gl->clear(gl->COLOR_BUFFER_BIT);
HXDLIN( 435)						renderer->_hx___popMaskRect();
HXDLIN( 435)						renderer->_hx___popMaskObject(hx::ObjectPtr<OBJ_>(this),null());
HXDLIN( 435)						::openfl::geom::Rectangle_obj::_hx___pool->release(rect);
            					}
HXDLIN( 435)					if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 435)						::openfl::_internal::renderer::opengl::GLShape_obj::render(hx::ObjectPtr<OBJ_>(this),renderer);
            					}
            				}
            			}
HXLINE( 436)			::openfl::_internal::renderer::opengl::GLTilemap_obj::render(hx::ObjectPtr<OBJ_>(this),renderer);
            		}
HXLINE( 440)		this->_hx___renderEvent(renderer);
            	}


void Tilemap_obj::_hx___renderGLMask( ::openfl::display::OpenGLRenderer renderer){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_445___renderGLMask)
HXLINE( 447)		this->_hx___updateCacheBitmap(renderer,false);
HXLINE( 449)		bool _hx_tmp;
HXDLIN( 449)		if (hx::IsNotNull( this->_hx___cacheBitmap )) {
HXLINE( 449)			_hx_tmp = !(this->_hx___isCacheBitmapRender);
            		}
            		else {
HXLINE( 449)			_hx_tmp = false;
            		}
HXDLIN( 449)		if (_hx_tmp) {
HXLINE( 451)			::openfl::_internal::renderer::opengl::GLBitmap_obj::renderMask(this->_hx___cacheBitmap,renderer);
            		}
            		else {
HXLINE( 455)			bool _hx_tmp1;
HXDLIN( 455)			if (hx::IsNull( this->opaqueBackground )) {
HXLINE( 455)				_hx_tmp1 = hx::IsNull( this->_hx___graphics );
            			}
            			else {
HXLINE( 455)				_hx_tmp1 = false;
            			}
HXDLIN( 455)			if (!(_hx_tmp1)) {
HXLINE( 455)				bool _hx_tmp2;
HXDLIN( 455)				bool _hx_tmp3;
HXDLIN( 455)				bool _hx_tmp4;
HXDLIN( 455)				if (hx::IsNotNull( this->opaqueBackground )) {
HXLINE( 455)					_hx_tmp4 = !(this->_hx___isCacheBitmapRender);
            				}
            				else {
HXLINE( 455)					_hx_tmp4 = false;
            				}
HXDLIN( 455)				if (_hx_tmp4) {
HXLINE( 455)					_hx_tmp3 = (this->get_width() > (int)0);
            				}
            				else {
HXLINE( 455)					_hx_tmp3 = false;
            				}
HXDLIN( 455)				if (_hx_tmp3) {
HXLINE( 455)					_hx_tmp2 = (this->get_height() > (int)0);
            				}
            				else {
HXLINE( 455)					_hx_tmp2 = false;
            				}
HXDLIN( 455)				if (_hx_tmp2) {
HXLINE( 455)					 ::lime::_backend::native::NativeGLRenderContext gl = renderer->_hx___gl;
            				}
HXDLIN( 455)				if (hx::IsNotNull( this->_hx___graphics )) {
HXLINE( 455)					::openfl::_internal::renderer::opengl::GLShape_obj::renderMask(hx::ObjectPtr<OBJ_>(this),renderer);
            				}
            			}
HXLINE( 456)			::openfl::_internal::renderer::opengl::GLTilemap_obj::renderMask(hx::ObjectPtr<OBJ_>(this),renderer);
            		}
            	}


 ::Dynamic Tilemap_obj::_hx___shouldCacheHardware( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_465___shouldCacheHardware)
HXDLIN( 465)		return true;
            	}


bool Tilemap_obj::_hx___updateCacheBitmap( ::openfl::display::DisplayObjectRenderer renderer,bool force){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_470___updateCacheBitmap)
HXLINE( 472)		bool _hx_tmp;
HXDLIN( 472)		if (hx::IsNull( this->_hx___filters )) {
HXLINE( 472)			_hx_tmp = hx::IsEq( renderer->_hx___type,::lime::graphics::RendererType_obj::OPENGL_dyn() );
            		}
            		else {
HXLINE( 472)			_hx_tmp = false;
            		}
HXDLIN( 472)		if (_hx_tmp) {
HXLINE( 474)			this->_hx___cacheBitmap = null();
HXLINE( 475)			this->_hx___cacheBitmapData = null();
HXLINE( 476)			this->_hx___cacheBitmapData2 = null();
HXLINE( 477)			this->_hx___cacheBitmapData3 = null();
HXLINE( 478)			this->_hx___cacheBitmapRenderer = null();
HXLINE( 480)			return false;
            		}
HXLINE( 484)		return this->super::_hx___updateCacheBitmap(renderer,force);
            	}


Float Tilemap_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_500_get_height)
HXDLIN( 500)		int _hx_tmp = this->_hx___height;
HXDLIN( 500)		return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            	}


Float Tilemap_obj::set_height(Float value){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_507_set_height)
HXLINE( 509)		this->_hx___height = ::Std_obj::_hx_int(value);
HXLINE( 510)		int _hx_tmp = this->_hx___height;
HXDLIN( 510)		return (_hx_tmp * ::Math_obj::abs(this->get_scaleY()));
            	}


int Tilemap_obj::get_numTiles(){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_530_get_numTiles)
HXDLIN( 530)		return this->_hx___group->__length;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tilemap_obj,get_numTiles,return )

 ::openfl::display::Tileset Tilemap_obj::get_tileset(){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_537_get_tileset)
HXDLIN( 537)		return this->_hx___tileset;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Tilemap_obj,get_tileset,return )

 ::openfl::display::Tileset Tilemap_obj::set_tileset( ::openfl::display::Tileset value){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_542_set_tileset)
HXLINE( 544)		if (hx::IsNotEq( value,this->_hx___tileset )) {
HXLINE( 546)			this->_hx___tileset = value;
HXLINE( 547)			this->_hx___group->_hx___dirty = true;
HXLINE( 550)			if (!(this->_hx___renderDirty)) {
HXLINE( 550)				this->_hx___renderDirty = true;
HXDLIN( 550)				this->_hx___setParentRenderDirty();
            			}
            		}
HXLINE( 555)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tilemap_obj,set_tileset,return )

Float Tilemap_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_563_get_width)
HXDLIN( 563)		int _hx_tmp = this->_hx___width;
HXDLIN( 563)		return (_hx_tmp * ::Math_obj::abs(this->_hx___scaleX));
            	}


Float Tilemap_obj::set_width(Float value){
            	HX_STACKFRAME(&_hx_pos_1cbb708783dfd99e_570_set_width)
HXLINE( 572)		this->_hx___width = ::Std_obj::_hx_int(value);
HXLINE( 573)		int _hx_tmp = this->_hx___width;
HXDLIN( 573)		return (_hx_tmp * ::Math_obj::abs(this->_hx___scaleX));
            	}



hx::ObjectPtr< Tilemap_obj > Tilemap_obj::__new(int width,int height, ::openfl::display::Tileset tileset,hx::Null< bool >  __o_smoothing) {
	hx::ObjectPtr< Tilemap_obj > __this = new Tilemap_obj();
	__this->__construct(width,height,tileset,__o_smoothing);
	return __this;
}

hx::ObjectPtr< Tilemap_obj > Tilemap_obj::__alloc(hx::Ctx *_hx_ctx,int width,int height, ::openfl::display::Tileset tileset,hx::Null< bool >  __o_smoothing) {
	Tilemap_obj *__this = (Tilemap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Tilemap_obj), true, "openfl.display.Tilemap"));
	*(void **)__this = Tilemap_obj::_hx_vtable;
	__this->__construct(width,height,tileset,__o_smoothing);
	return __this;
}

Tilemap_obj::Tilemap_obj()
{
}

void Tilemap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Tilemap);
	HX_MARK_MEMBER_NAME(tileAlphaEnabled,"tileAlphaEnabled");
	HX_MARK_MEMBER_NAME(tileColorTransformEnabled,"tileColorTransformEnabled");
	HX_MARK_MEMBER_NAME(smoothing,"smoothing");
	HX_MARK_MEMBER_NAME(_hx___group,"__group");
	HX_MARK_MEMBER_NAME(_hx___tileset,"__tileset");
	HX_MARK_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_MARK_MEMBER_NAME(_hx___bufferContext,"__bufferContext");
	HX_MARK_MEMBER_NAME(_hx___bufferData,"__bufferData");
	HX_MARK_MEMBER_NAME(_hx___bufferLength,"__bufferLength");
	HX_MARK_MEMBER_NAME(_hx___height,"__height");
	HX_MARK_MEMBER_NAME(_hx___width,"__width");
	 ::openfl::display::DisplayObject_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Tilemap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(tileAlphaEnabled,"tileAlphaEnabled");
	HX_VISIT_MEMBER_NAME(tileColorTransformEnabled,"tileColorTransformEnabled");
	HX_VISIT_MEMBER_NAME(smoothing,"smoothing");
	HX_VISIT_MEMBER_NAME(_hx___group,"__group");
	HX_VISIT_MEMBER_NAME(_hx___tileset,"__tileset");
	HX_VISIT_MEMBER_NAME(_hx___buffer,"__buffer");
	HX_VISIT_MEMBER_NAME(_hx___bufferContext,"__bufferContext");
	HX_VISIT_MEMBER_NAME(_hx___bufferData,"__bufferData");
	HX_VISIT_MEMBER_NAME(_hx___bufferLength,"__bufferLength");
	HX_VISIT_MEMBER_NAME(_hx___height,"__height");
	HX_VISIT_MEMBER_NAME(_hx___width,"__width");
	 ::openfl::display::DisplayObject_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Tilemap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"tileset") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_tileset() ); }
		if (HX_FIELD_EQ(inName,"__group") ) { return hx::Val( _hx___group ); }
		if (HX_FIELD_EQ(inName,"__width") ) { return hx::Val( _hx___width ); }
		if (HX_FIELD_EQ(inName,"addTile") ) { return hx::Val( addTile_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"numTiles") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_numTiles() ); }
		if (HX_FIELD_EQ(inName,"__buffer") ) { return hx::Val( _hx___buffer ); }
		if (HX_FIELD_EQ(inName,"__height") ) { return hx::Val( _hx___height ); }
		if (HX_FIELD_EQ(inName,"addTiles") ) { return hx::Val( addTiles_dyn() ); }
		if (HX_FIELD_EQ(inName,"contains") ) { return hx::Val( contains_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTiles") ) { return hx::Val( getTiles_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTiles") ) { return hx::Val( setTiles_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"smoothing") ) { return hx::Val( smoothing ); }
		if (HX_FIELD_EQ(inName,"__tileset") ) { return hx::Val( _hx___tileset ); }
		if (HX_FIELD_EQ(inName,"addTileAt") ) { return hx::Val( addTileAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTileAt") ) { return hx::Val( getTileAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"swapTiles") ) { return hx::Val( swapTiles_dyn() ); }
		if (HX_FIELD_EQ(inName,"__hitTest") ) { return hx::Val( _hx___hitTest_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_width") ) { return hx::Val( set_width_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"removeTile") ) { return hx::Val( removeTile_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGL") ) { return hx::Val( _hx___renderGL_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_height") ) { return hx::Val( set_height_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"removeTiles") ) { return hx::Val( removeTiles_dyn() ); }
		if (HX_FIELD_EQ(inName,"swapTilesAt") ) { return hx::Val( swapTilesAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"__getBounds") ) { return hx::Val( _hx___getBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderDOM") ) { return hx::Val( _hx___renderDOM_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_tileset") ) { return hx::Val( get_tileset_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_tileset") ) { return hx::Val( set_tileset_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__bufferData") ) { return hx::Val( _hx___bufferData ); }
		if (HX_FIELD_EQ(inName,"getTileIndex") ) { return hx::Val( getTileIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"removeTileAt") ) { return hx::Val( removeTileAt_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTileIndex") ) { return hx::Val( setTileIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return hx::Val( _hx___enterFrame_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_numTiles") ) { return hx::Val( get_numTiles_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"__renderCairo") ) { return hx::Val( _hx___renderCairo_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderFlash") ) { return hx::Val( _hx___renderFlash_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__bufferLength") ) { return hx::Val( _hx___bufferLength ); }
		if (HX_FIELD_EQ(inName,"__renderCanvas") ) { return hx::Val( _hx___renderCanvas_dyn() ); }
		if (HX_FIELD_EQ(inName,"__renderGLMask") ) { return hx::Val( _hx___renderGLMask_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__bufferContext") ) { return hx::Val( _hx___bufferContext ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"tileAlphaEnabled") ) { return hx::Val( tileAlphaEnabled ); }
		if (HX_FIELD_EQ(inName,"__renderDOMClear") ) { return hx::Val( _hx___renderDOMClear_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"__updateCacheBitmap") ) { return hx::Val( _hx___updateCacheBitmap_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"__shouldCacheHardware") ) { return hx::Val( _hx___shouldCacheHardware_dyn() ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"tileColorTransformEnabled") ) { return hx::Val( tileColorTransformEnabled ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Tilemap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"tileset") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_tileset(inValue.Cast<  ::openfl::display::Tileset >()) ); }
		if (HX_FIELD_EQ(inName,"__group") ) { _hx___group=inValue.Cast<  ::openfl::display::TileContainer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__width") ) { _hx___width=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"__buffer") ) { _hx___buffer=inValue.Cast<  ::lime::graphics::opengl::GLObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__height") ) { _hx___height=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"smoothing") ) { smoothing=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"__tileset") ) { _hx___tileset=inValue.Cast<  ::openfl::display::Tileset >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__bufferData") ) { _hx___bufferData=inValue.Cast<  ::lime::utils::ArrayBufferView >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"__bufferLength") ) { _hx___bufferLength=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"__bufferContext") ) { _hx___bufferContext=inValue.Cast<  ::lime::_backend::native::NativeGLRenderContext >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"tileAlphaEnabled") ) { tileAlphaEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"tileColorTransformEnabled") ) { tileColorTransformEnabled=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Tilemap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("numTiles","\x5f","\x11","\x45","\xcd"));
	outFields->push(HX_HCSTRING("tileAlphaEnabled","\x11","\x71","\xce","\xdc"));
	outFields->push(HX_HCSTRING("tileColorTransformEnabled","\xea","\x29","\x1c","\xdd"));
	outFields->push(HX_HCSTRING("tileset","\x34","\x81","\x93","\x45"));
	outFields->push(HX_HCSTRING("smoothing","\x74","\xd5","\xe1","\x95"));
	outFields->push(HX_HCSTRING("__group","\x1f","\x0c","\x53","\x04"));
	outFields->push(HX_HCSTRING("__tileset","\x14","\xd2","\xe1","\xc6"));
	outFields->push(HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78"));
	outFields->push(HX_HCSTRING("__bufferContext","\xaf","\xd9","\xa7","\xd6"));
	outFields->push(HX_HCSTRING("__bufferData","\x6a","\x3a","\x07","\xcc"));
	outFields->push(HX_HCSTRING("__bufferLength","\x26","\x09","\x9d","\xc4"));
	outFields->push(HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"));
	outFields->push(HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Tilemap_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Tilemap_obj,tileAlphaEnabled),HX_HCSTRING("tileAlphaEnabled","\x11","\x71","\xce","\xdc")},
	{hx::fsBool,(int)offsetof(Tilemap_obj,tileColorTransformEnabled),HX_HCSTRING("tileColorTransformEnabled","\xea","\x29","\x1c","\xdd")},
	{hx::fsBool,(int)offsetof(Tilemap_obj,smoothing),HX_HCSTRING("smoothing","\x74","\xd5","\xe1","\x95")},
	{hx::fsObject /*::openfl::display::TileContainer*/ ,(int)offsetof(Tilemap_obj,_hx___group),HX_HCSTRING("__group","\x1f","\x0c","\x53","\x04")},
	{hx::fsObject /*::openfl::display::Tileset*/ ,(int)offsetof(Tilemap_obj,_hx___tileset),HX_HCSTRING("__tileset","\x14","\xd2","\xe1","\xc6")},
	{hx::fsObject /*::lime::graphics::opengl::GLObject*/ ,(int)offsetof(Tilemap_obj,_hx___buffer),HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78")},
	{hx::fsObject /*::lime::_backend::native::NativeGLRenderContext*/ ,(int)offsetof(Tilemap_obj,_hx___bufferContext),HX_HCSTRING("__bufferContext","\xaf","\xd9","\xa7","\xd6")},
	{hx::fsObject /*::lime::utils::ArrayBufferView*/ ,(int)offsetof(Tilemap_obj,_hx___bufferData),HX_HCSTRING("__bufferData","\x6a","\x3a","\x07","\xcc")},
	{hx::fsInt,(int)offsetof(Tilemap_obj,_hx___bufferLength),HX_HCSTRING("__bufferLength","\x26","\x09","\x9d","\xc4")},
	{hx::fsInt,(int)offsetof(Tilemap_obj,_hx___height),HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa")},
	{hx::fsInt,(int)offsetof(Tilemap_obj,_hx___width),HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Tilemap_obj_sStaticStorageInfo = 0;
#endif

static ::String Tilemap_obj_sMemberFields[] = {
	HX_HCSTRING("tileAlphaEnabled","\x11","\x71","\xce","\xdc"),
	HX_HCSTRING("tileColorTransformEnabled","\xea","\x29","\x1c","\xdd"),
	HX_HCSTRING("smoothing","\x74","\xd5","\xe1","\x95"),
	HX_HCSTRING("__group","\x1f","\x0c","\x53","\x04"),
	HX_HCSTRING("__tileset","\x14","\xd2","\xe1","\xc6"),
	HX_HCSTRING("__buffer","\x20","\x28","\xc4","\x78"),
	HX_HCSTRING("__bufferContext","\xaf","\xd9","\xa7","\xd6"),
	HX_HCSTRING("__bufferData","\x6a","\x3a","\x07","\xcc"),
	HX_HCSTRING("__bufferLength","\x26","\x09","\x9d","\xc4"),
	HX_HCSTRING("__height","\x07","\x73","\x7b","\xaa"),
	HX_HCSTRING("__width","\xe6","\x0e","\xc1","\x34"),
	HX_HCSTRING("addTile","\xef","\x0d","\x3a","\x89"),
	HX_HCSTRING("addTileAt","\xc2","\xe0","\x4c","\xd6"),
	HX_HCSTRING("addTiles","\xa4","\x23","\x92","\x89"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("getTileAt","\xf7","\x34","\x7f","\x9a"),
	HX_HCSTRING("getTileIndex","\x8e","\x95","\xc6","\x58"),
	HX_HCSTRING("getTiles","\x0f","\x0d","\x0c","\x70"),
	HX_HCSTRING("removeTile","\x92","\x05","\x1c","\xca"),
	HX_HCSTRING("removeTileAt","\x25","\x47","\x56","\x8d"),
	HX_HCSTRING("removeTiles","\xa1","\xda","\x68","\x0e"),
	HX_HCSTRING("setTileIndex","\x02","\xb9","\xbf","\x6d"),
	HX_HCSTRING("setTiles","\x83","\x66","\x69","\x1e"),
	HX_HCSTRING("swapTiles","\xf2","\x0d","\xe2","\x85"),
	HX_HCSTRING("swapTilesAt","\x85","\x27","\xf7","\x4c"),
	HX_HCSTRING("__enterFrame","\x15","\x7f","\xe3","\x3a"),
	HX_HCSTRING("__getBounds","\x8b","\x58","\xa0","\x10"),
	HX_HCSTRING("__hitTest","\x25","\xb1","\xcd","\x63"),
	HX_HCSTRING("__renderCairo","\x32","\x9e","\x42","\x55"),
	HX_HCSTRING("__renderCanvas","\xee","\xdb","\x58","\x48"),
	HX_HCSTRING("__renderDOM","\xac","\xf5","\x83","\xfb"),
	HX_HCSTRING("__renderDOMClear","\x41","\xdc","\xee","\x79"),
	HX_HCSTRING("__renderFlash","\x5a","\xa3","\xb5","\x16"),
	HX_HCSTRING("__renderGL","\x1b","\x1e","\x14","\x56"),
	HX_HCSTRING("__renderGLMask","\xa7","\x34","\x7c","\xb4"),
	HX_HCSTRING("__shouldCacheHardware","\xb7","\xaf","\xf5","\x89"),
	HX_HCSTRING("__updateCacheBitmap","\x28","\x11","\x07","\x27"),
	HX_HCSTRING("get_height","\xb0","\x77","\xd3","\xf2"),
	HX_HCSTRING("set_height","\x24","\x16","\x51","\xf6"),
	HX_HCSTRING("get_numTiles","\x68","\xc5","\x5e","\x82"),
	HX_HCSTRING("get_tileset","\x4b","\xe1","\x8d","\xcb"),
	HX_HCSTRING("set_tileset","\x57","\xe8","\xfa","\xd5"),
	HX_HCSTRING("get_width","\x5d","\x12","\x0c","\x0e"),
	HX_HCSTRING("set_width","\x69","\xfe","\x5c","\xf1"),
	::String(null()) };

static void Tilemap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Tilemap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Tilemap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Tilemap_obj::__mClass,"__mClass");
};

#endif

hx::Class Tilemap_obj::__mClass;

void Tilemap_obj::__register()
{
	hx::Object *dummy = new Tilemap_obj;
	Tilemap_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("openfl.display.Tilemap","\x04","\xbd","\x49","\xb4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Tilemap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Tilemap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Tilemap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Tilemap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Tilemap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Tilemap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace display
