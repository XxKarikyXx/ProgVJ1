// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_gameObjects_God
#include <gameObjects/God.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_skill_ISkillLogic
#include <skill/ISkillLogic.h>
#endif
#ifndef INCLUDED_skill_SkillsController
#include <skill/SkillsController.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_eeae2ec830a7de90_17_new,"gameObjects.God","new",0x484ed2a2,"gameObjects.God.new","gameObjects/God.hx",17,0x48e74dcf)
static const int _hx_array_data_6e4c99b0_1[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,(int)10,(int)11,(int)12,(int)13,(int)14,(int)15,
};
static const int _hx_array_data_6e4c99b0_2[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,(int)10,(int)11,(int)12,(int)13,(int)14,(int)15,
};
HX_LOCAL_STACK_FRAME(_hx_pos_eeae2ec830a7de90_48_create,"gameObjects.God","create",0xa101b9fa,"gameObjects.God.create","gameObjects/God.hx",48,0x48e74dcf)
HX_LOCAL_STACK_FRAME(_hx_pos_eeae2ec830a7de90_54_update,"gameObjects.God","update",0xabf7d907,"gameObjects.God.update","gameObjects/God.hx",54,0x48e74dcf)
HX_LOCAL_STACK_FRAME(_hx_pos_eeae2ec830a7de90_110_normalGodMovement,"gameObjects.God","normalGodMovement",0xf0bb3166,"gameObjects.God.normalGodMovement","gameObjects/God.hx",110,0x48e74dcf)
HX_LOCAL_STACK_FRAME(_hx_pos_eeae2ec830a7de90_142_godStunned,"gameObjects.God","godStunned",0x51688375,"gameObjects.God.godStunned","gameObjects/God.hx",142,0x48e74dcf)
HX_LOCAL_STACK_FRAME(_hx_pos_eeae2ec830a7de90_155_destroy,"gameObjects.God","destroy",0x539c783c,"gameObjects.God.destroy","gameObjects/God.hx",155,0x48e74dcf)
HX_LOCAL_STACK_FRAME(_hx_pos_eeae2ec830a7de90_23_boot,"gameObjects.God","boot",0xf4c27bb0,"gameObjects.God.boot","gameObjects/God.hx",23,0x48e74dcf)
HX_LOCAL_STACK_FRAME(_hx_pos_eeae2ec830a7de90_24_boot,"gameObjects.God","boot",0xf4c27bb0,"gameObjects.God.boot","gameObjects/God.hx",24,0x48e74dcf)
HX_LOCAL_STACK_FRAME(_hx_pos_eeae2ec830a7de90_25_boot,"gameObjects.God","boot",0xf4c27bb0,"gameObjects.God.boot","gameObjects/God.hx",25,0x48e74dcf)
HX_LOCAL_STACK_FRAME(_hx_pos_eeae2ec830a7de90_26_boot,"gameObjects.God","boot",0xf4c27bb0,"gameObjects.God.boot","gameObjects/God.hx",26,0x48e74dcf)
namespace gameObjects{

void God_obj::__construct(Float aX,Float aY){
            	HX_STACKFRAME(&_hx_pos_eeae2ec830a7de90_17_new)
HXLINE(  20)		this->vStateDuration = ((Float)-1);
HXLINE(  19)		this->vState = HX_("Normal",47,e6,fd,64);
HXLINE(  30)		super::__construct(aX,aY,null());
HXLINE(  31)		this->loadGraphic(HX_("assets/img/Sheets/fantasmaDiosSheet.png",c7,40,9d,90),true,(int)80,(int)80,null(),null());
HXLINE(  32)		this->animation->add(HX_("run",4b,e7,56,00),::Array_obj< int >::fromData( _hx_array_data_6e4c99b0_1,16),(int)30,null(),null(),null());
HXLINE(  33)		this->animation->add(HX_("idle",14,a7,b3,45),::Array_obj< int >::fromData( _hx_array_data_6e4c99b0_2,16),(int)30,null(),null(),null());
HXLINE(  34)		this->set_alpha(((Float)0.5));
HXLINE(  36)		this->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(  38)		this->offset->set_y((int)15);
HXLINE(  39)		this->offset->set_x((int)12);
HXLINE(  40)		this->set_width((int)57);
HXLINE(  41)		this->set_height((int)57);
HXLINE(  43)		this->maxVelocity->set_x((int)540);
HXLINE(  44)		this->maxVelocity->set_y((int)540);
            	}

Dynamic God_obj::__CreateEmpty() { return new God_obj; }

void *God_obj::_hx_vtable = 0;

Dynamic God_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< God_obj > _hx_result = new God_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool God_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1c10c87e) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x1c10c87e;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x2e105115;
	}
}

void God_obj::create(){
            	HX_STACKFRAME(&_hx_pos_eeae2ec830a7de90_48_create)
            	}


HX_DEFINE_DYNAMIC_FUNC0(God_obj,create,(void))

void God_obj::update(Float aDt){
            	HX_STACKFRAME(&_hx_pos_eeae2ec830a7de90_54_update)
HXLINE(  55)		this->acceleration->set_x((int)0);
HXLINE(  56)		this->velocity->set_x((int)0);
HXLINE(  57)		this->acceleration->set_y((int)0);
HXLINE(  58)		this->velocity->set_y((int)0);
HXLINE(  60)		{
HXLINE(  60)			::String _g = this->vState;
HXDLIN(  60)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("Normal",47,e6,fd,64)) ){
HXLINE(  63)				this->normalGodMovement(aDt);
HXDLIN(  63)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("Stunned",33,83,c6,83)) ){
HXLINE(  65)				this->godStunned(aDt);
HXDLIN(  65)				goto _hx_goto_4;
            			}
            			_hx_goto_4:;
            		}
HXLINE(  68)		bool _hx_tmp;
HXDLIN(  68)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == (int)2)) {
HXLINE(  68)			_hx_tmp = hx::IsNotNull( this->vSkillsController->vActiveSkill );
            		}
            		else {
HXLINE(  68)			_hx_tmp = false;
            		}
HXDLIN(  68)		if (_hx_tmp) {
HXLINE(  70)			this->vSkillsController->runGodSkill(::flixel::FlxG_obj::mouse->x,::flixel::FlxG_obj::mouse->y);
            		}
HXLINE(  73)		this->vSkillsController->validateSkillsConditions();
HXLINE(  75)		bool _hx_tmp1;
HXDLIN(  75)		if ((this->velocity->x == (int)0)) {
HXLINE(  75)			_hx_tmp1 = (this->velocity->y == (int)0);
            		}
            		else {
HXLINE(  75)			_hx_tmp1 = false;
            		}
HXDLIN(  75)		if (_hx_tmp1) {
HXLINE(  77)			this->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
            		}
            		else {
HXLINE(  81)			if ((this->velocity->y == (int)0)) {
HXLINE(  87)				if ((this->velocity->x != (int)0)) {
HXLINE(  89)					this->animation->play(HX_("run",4b,e7,56,00),null(),null(),null());
            				}
            			}
            		}
HXLINE(  95)		if ((this->acceleration->x > (int)0)) {
HXLINE(  97)			this->set_flipX(false);
            		}
HXLINE( 100)		if ((this->acceleration->x < (int)0)) {
HXLINE( 102)			this->set_flipX(true);
            		}
HXLINE( 105)		this->super::update(aDt);
            	}


void God_obj::normalGodMovement(Float aDt){
            	HX_STACKFRAME(&_hx_pos_eeae2ec830a7de90_110_normalGodMovement)
HXLINE( 111)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 111)		if (_this->keyManager->checkStatus((int)37,_this->status)) {
HXLINE( 113)			this->acceleration->set_x((int)-1100);
HXLINE( 114)			this->velocity->set_x((int)-540);
            		}
HXLINE( 118)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 118)		if (_this1->keyManager->checkStatus((int)39,_this1->status)) {
HXLINE( 120)			this->acceleration->set_x((int)1100);
HXLINE( 121)			this->velocity->set_x((int)540);
            		}
HXLINE( 125)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 125)		if (_this2->keyManager->checkStatus((int)38,_this2->status)) {
HXLINE( 127)			this->acceleration->set_y((int)-1100);
HXLINE( 128)			this->velocity->set_y((int)-540);
            		}
HXLINE( 132)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 132)		if (_this3->keyManager->checkStatus((int)40,_this3->status)) {
HXLINE( 134)			this->acceleration->set_y((int)1100);
HXLINE( 135)			this->velocity->set_y((int)540);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(God_obj,normalGodMovement,(void))

void God_obj::godStunned(Float aDt){
            	HX_STACKFRAME(&_hx_pos_eeae2ec830a7de90_142_godStunned)
HXDLIN( 142)		if ((this->vStateDuration <= (int)0)) {
HXLINE( 144)			this->vState = HX_("Normal",47,e6,fd,64);
HXLINE( 145)			this->vStateDuration = (int)-1;
            		}
            		else {
HXLINE( 148)			::haxe::Log_obj::trace(this->vStateDuration,hx::SourceInfo(HX_("God.hx",22,9b,0d,8f),148,HX_("gameObjects.God",b0,99,4c,6e),HX_("godStunned",77,d9,1d,b0)));
HXLINE( 149)			 ::gameObjects::God _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 149)			_hx_tmp->vStateDuration = (_hx_tmp->vStateDuration - aDt);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(God_obj,godStunned,(void))

void God_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_eeae2ec830a7de90_155_destroy)
HXDLIN( 155)		this->super::destroy();
            	}


int God_obj::cAccelerationy;

int God_obj::cAccelerationx;

int God_obj::cVelocityx;

int God_obj::cVelocityy;


hx::ObjectPtr< God_obj > God_obj::__new(Float aX,Float aY) {
	hx::ObjectPtr< God_obj > __this = new God_obj();
	__this->__construct(aX,aY);
	return __this;
}

hx::ObjectPtr< God_obj > God_obj::__alloc(hx::Ctx *_hx_ctx,Float aX,Float aY) {
	God_obj *__this = (God_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(God_obj), true, "gameObjects.God"));
	*(void **)__this = God_obj::_hx_vtable;
	__this->__construct(aX,aY);
	return __this;
}

God_obj::God_obj()
{
}

void God_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(God);
	HX_MARK_MEMBER_NAME(vState,"vState");
	HX_MARK_MEMBER_NAME(vStateDuration,"vStateDuration");
	HX_MARK_MEMBER_NAME(vSkillsController,"vSkillsController");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void God_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(vState,"vState");
	HX_VISIT_MEMBER_NAME(vStateDuration,"vStateDuration");
	HX_VISIT_MEMBER_NAME(vSkillsController,"vSkillsController");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val God_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"vState") ) { return hx::Val( vState ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"godStunned") ) { return hx::Val( godStunned_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"vStateDuration") ) { return hx::Val( vStateDuration ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"vSkillsController") ) { return hx::Val( vSkillsController ); }
		if (HX_FIELD_EQ(inName,"normalGodMovement") ) { return hx::Val( normalGodMovement_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val God_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"vState") ) { vState=inValue.Cast< ::String >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"vStateDuration") ) { vStateDuration=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"vSkillsController") ) { vSkillsController=inValue.Cast<  ::skill::SkillsController >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void God_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("vState","\xbb","\x79","\x55","\x45"));
	outFields->push(HX_HCSTRING("vStateDuration","\x2f","\xf8","\x8d","\x41"));
	outFields->push(HX_HCSTRING("vSkillsController","\x94","\x15","\x94","\x18"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo God_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(God_obj,vState),HX_HCSTRING("vState","\xbb","\x79","\x55","\x45")},
	{hx::fsFloat,(int)offsetof(God_obj,vStateDuration),HX_HCSTRING("vStateDuration","\x2f","\xf8","\x8d","\x41")},
	{hx::fsObject /*::skill::SkillsController*/ ,(int)offsetof(God_obj,vSkillsController),HX_HCSTRING("vSkillsController","\x94","\x15","\x94","\x18")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo God_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &God_obj::cAccelerationy,HX_HCSTRING("cAccelerationy","\xd6","\xc5","\x76","\x0b")},
	{hx::fsInt,(void *) &God_obj::cAccelerationx,HX_HCSTRING("cAccelerationx","\xd5","\xc5","\x76","\x0b")},
	{hx::fsInt,(void *) &God_obj::cVelocityx,HX_HCSTRING("cVelocityx","\xd8","\x12","\xe3","\xfd")},
	{hx::fsInt,(void *) &God_obj::cVelocityy,HX_HCSTRING("cVelocityy","\xd9","\x12","\xe3","\xfd")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String God_obj_sMemberFields[] = {
	HX_HCSTRING("vState","\xbb","\x79","\x55","\x45"),
	HX_HCSTRING("vStateDuration","\x2f","\xf8","\x8d","\x41"),
	HX_HCSTRING("vSkillsController","\x94","\x15","\x94","\x18"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("normalGodMovement","\xa4","\x7f","\x61","\x67"),
	HX_HCSTRING("godStunned","\x77","\xd9","\x1d","\xb0"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	::String(null()) };

static void God_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(God_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(God_obj::cAccelerationy,"cAccelerationy");
	HX_MARK_MEMBER_NAME(God_obj::cAccelerationx,"cAccelerationx");
	HX_MARK_MEMBER_NAME(God_obj::cVelocityx,"cVelocityx");
	HX_MARK_MEMBER_NAME(God_obj::cVelocityy,"cVelocityy");
};

#ifdef HXCPP_VISIT_ALLOCS
static void God_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(God_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(God_obj::cAccelerationy,"cAccelerationy");
	HX_VISIT_MEMBER_NAME(God_obj::cAccelerationx,"cAccelerationx");
	HX_VISIT_MEMBER_NAME(God_obj::cVelocityx,"cVelocityx");
	HX_VISIT_MEMBER_NAME(God_obj::cVelocityy,"cVelocityy");
};

#endif

hx::Class God_obj::__mClass;

static ::String God_obj_sStaticFields[] = {
	HX_HCSTRING("cAccelerationy","\xd6","\xc5","\x76","\x0b"),
	HX_HCSTRING("cAccelerationx","\xd5","\xc5","\x76","\x0b"),
	HX_HCSTRING("cVelocityx","\xd8","\x12","\xe3","\xfd"),
	HX_HCSTRING("cVelocityy","\xd9","\x12","\xe3","\xfd"),
	::String(null())
};

void God_obj::__register()
{
	hx::Object *dummy = new God_obj;
	God_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("gameObjects.God","\xb0","\x99","\x4c","\x6e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = God_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(God_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(God_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< God_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = God_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = God_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = God_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void God_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_eeae2ec830a7de90_23_boot)
HXDLIN(  23)		cAccelerationy = (int)1100;
            	}
{
            	HX_STACKFRAME(&_hx_pos_eeae2ec830a7de90_24_boot)
HXDLIN(  24)		cAccelerationx = (int)1100;
            	}
{
            	HX_STACKFRAME(&_hx_pos_eeae2ec830a7de90_25_boot)
HXDLIN(  25)		cVelocityx = (int)540;
            	}
{
            	HX_STACKFRAME(&_hx_pos_eeae2ec830a7de90_26_boot)
HXDLIN(  26)		cVelocityy = (int)540;
            	}
}

} // end namespace gameObjects
