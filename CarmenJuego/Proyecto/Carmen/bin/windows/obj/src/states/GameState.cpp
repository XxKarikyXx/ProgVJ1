// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_GlobalGameData
#include <GlobalGameData.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemapAutoTiling
#include <flixel/tile/FlxTilemapAutoTiling.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_gameObjects_Bomb
#include <gameObjects/Bomb.h>
#endif
#ifndef INCLUDED_gameObjects_Coin
#include <gameObjects/Coin.h>
#endif
#ifndef INCLUDED_gameObjects_God
#include <gameObjects/God.h>
#endif
#ifndef INCLUDED_gameObjects_Player1
#include <gameObjects/Player1.h>
#endif
#ifndef INCLUDED_gameObjects_ProjectilePlayer
#include <gameObjects/ProjectilePlayer.h>
#endif
#ifndef INCLUDED_gameObjects_Trap
#include <gameObjects/Trap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_skill_SkillsController
#include <skill/SkillsController.h>
#endif
#ifndef INCLUDED_states_GameOverPlayer
#include <states/GameOverPlayer.h>
#endif
#ifndef INCLUDED_states_GameState
#include <states/GameState.h>
#endif
#ifndef INCLUDED_states_GameWinPlayer
#include <states/GameWinPlayer.h>
#endif
#ifndef INCLUDED_states_MainMenu
#include <states/MainMenu.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_89fcaa4c5f66d414_25_new,"states.GameState","new",0xcc06e4e5,"states.GameState.new","states/GameState.hx",25,0xe63c7bac)
HX_LOCAL_STACK_FRAME(_hx_pos_89fcaa4c5f66d414_60_create,"states.GameState","create",0x526a3397,"states.GameState.create","states/GameState.hx",60,0xe63c7bac)
HX_LOCAL_STACK_FRAME(_hx_pos_89fcaa4c5f66d414_127_setCoinsData,"states.GameState","setCoinsData",0x506627e5,"states.GameState.setCoinsData","states/GameState.hx",127,0xe63c7bac)
HX_LOCAL_STACK_FRAME(_hx_pos_89fcaa4c5f66d414_140_setSkillsControllerData,"states.GameState","setSkillsControllerData",0x10eb000f,"states.GameState.setSkillsControllerData","states/GameState.hx",140,0xe63c7bac)
HX_LOCAL_STACK_FRAME(_hx_pos_89fcaa4c5f66d414_161_setPlayerData,"states.GameState","setPlayerData",0x23ff3d32,"states.GameState.setPlayerData","states/GameState.hx",161,0xe63c7bac)
HX_LOCAL_STACK_FRAME(_hx_pos_89fcaa4c5f66d414_179_setGodData,"states.GameState","setGodData",0x39ba341f,"states.GameState.setGodData","states/GameState.hx",179,0xe63c7bac)
HX_LOCAL_STACK_FRAME(_hx_pos_89fcaa4c5f66d414_183_setCoinXAndYRandom,"states.GameState","setCoinXAndYRandom",0x82eefd65,"states.GameState.setCoinXAndYRandom","states/GameState.hx",183,0xe63c7bac)
HX_LOCAL_STACK_FRAME(_hx_pos_89fcaa4c5f66d414_220_playerCollectedAllCoins,"states.GameState","playerCollectedAllCoins",0xcd055eee,"states.GameState.playerCollectedAllCoins","states/GameState.hx",220,0xe63c7bac)
HX_LOCAL_STACK_FRAME(_hx_pos_89fcaa4c5f66d414_223_update,"states.GameState","update",0x5d6052a4,"states.GameState.update","states/GameState.hx",223,0xe63c7bac)
HX_LOCAL_STACK_FRAME(_hx_pos_89fcaa4c5f66d414_296_shuffleCoins,"states.GameState","shuffleCoins",0xc447bfe4,"states.GameState.shuffleCoins","states/GameState.hx",296,0xe63c7bac)
HX_LOCAL_STACK_FRAME(_hx_pos_89fcaa4c5f66d414_307_playerVsCoins,"states.GameState","playerVsCoins",0x58517ca9,"states.GameState.playerVsCoins","states/GameState.hx",307,0xe63c7bac)
HX_LOCAL_STACK_FRAME(_hx_pos_89fcaa4c5f66d414_317_trapsVsPlayer,"states.GameState","trapsVsPlayer",0xc88acb49,"states.GameState.trapsVsPlayer","states/GameState.hx",317,0xe63c7bac)
HX_LOCAL_STACK_FRAME(_hx_pos_89fcaa4c5f66d414_327_mapVsBombs,"states.GameState","mapVsBombs",0x1970de33,"states.GameState.mapVsBombs","states/GameState.hx",327,0xe63c7bac)
HX_LOCAL_STACK_FRAME(_hx_pos_89fcaa4c5f66d414_333_bombsVsPlayer,"states.GameState","bombsVsPlayer",0xa21e2834,"states.GameState.bombsVsPlayer","states/GameState.hx",333,0xe63c7bac)
HX_LOCAL_STACK_FRAME(_hx_pos_89fcaa4c5f66d414_341_projectilesVsGod,"states.GameState","projectilesVsGod",0xd93d4390,"states.GameState.projectilesVsGod","states/GameState.hx",341,0xe63c7bac)
HX_LOCAL_STACK_FRAME(_hx_pos_89fcaa4c5f66d414_350_projectilesVsPlayer,"states.GameState","projectilesVsPlayer",0x50c05d8d,"states.GameState.projectilesVsPlayer","states/GameState.hx",350,0xe63c7bac)
HX_LOCAL_STACK_FRAME(_hx_pos_89fcaa4c5f66d414_357_playerVsGod,"states.GameState","playerVsGod",0xeeb38463,"states.GameState.playerVsGod","states/GameState.hx",357,0xe63c7bac)
HX_LOCAL_STACK_FRAME(_hx_pos_89fcaa4c5f66d414_364_destroy,"states.GameState","destroy",0xdd9e67ff,"states.GameState.destroy","states/GameState.hx",364,0xe63c7bac)
HX_LOCAL_STACK_FRAME(_hx_pos_89fcaa4c5f66d414_47_boot,"states.GameState","boot",0xb21a640d,"states.GameState.boot","states/GameState.hx",47,0xe63c7bac)
HX_LOCAL_STACK_FRAME(_hx_pos_89fcaa4c5f66d414_48_boot,"states.GameState","boot",0xb21a640d,"states.GameState.boot","states/GameState.hx",48,0xe63c7bac)
namespace states{

void GameState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_89fcaa4c5f66d414_25_new)
HXLINE(  39)		this->vResetPlaceCoin = false;
HXLINE(  56)		super::__construct(null());
            	}

Dynamic GameState_obj::__CreateEmpty() { return new GameState_obj; }

void *GameState_obj::_hx_vtable = 0;

Dynamic GameState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GameState_obj > _hx_result = new GameState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GameState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2335d9a7) {
		if (inClassId<=(int)0x1a7112f9) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1a7112f9;
		} else {
			return inClassId==(int)0x2335d9a7;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x3634c52c;
	}
}

void GameState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_89fcaa4c5f66d414_60_create)
HXLINE(  61)		this->vBackgroundSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  62)		this->vBackgroundSprite->loadGraphic(HX_("assets/map/fondo_azul.png",f9,ba,e9,56),false,(int)1920,(int)1080,null(),null());
HXLINE(  63)		this->add(this->vBackgroundSprite);
HXLINE(  64)		this->vMap =  ::flixel::tile::FlxTilemap_obj::__alloc( HX_CTX );
HXLINE(  65)		this->vMap->loadMapFromCSV(HX_("assets/map/cosahermosa.csv",24,29,13,a9),HX_("assets/map/tile_ladrillos.png",b3,34,5a,91),(int)32,(int)32,null(),null(),null(),null());
HXLINE(  66)		this->vMap->setTileProperties((int)2,(int)0,null(),null(),null());
HXLINE(  67)		this->vMap->setTileProperties((int)1,(int)0,null(),null(),null());
HXLINE(  68)		this->add(this->vMap);
HXLINE(  70)		this->vBackgroundSound = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/LaMulanaOSV.wav",ff,63,57,ef),null(),null(),null(),null(),null(),null(),null());
HXLINE(  71)		this->add(this->vBackgroundSound);
HXLINE(  72)		this->vBackgroundSound->looped = true;
HXLINE(  73)		this->vBackgroundSound->play(true,(int)0,null());
HXLINE(  75)		this->vPlayer =  ::gameObjects::Player1_obj::__alloc( HX_CTX ,(int)80,(int)900);
HXLINE(  76)		this->vGod =  ::gameObjects::God_obj::__alloc( HX_CTX ,(int)1700,(int)950);
HXLINE(  78)		this->add(this->vPlayer);
HXLINE(  79)		this->add(this->vGod);
HXLINE(  80)		::GlobalGameData_obj::vGod = this->vGod;
HXLINE(  81)		::GlobalGameData_obj::vPlayer1 = this->vPlayer;
HXLINE(  82)		::GlobalGameData_obj::vMap = this->vMap;
HXLINE(  84)		this->vTextSkill =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)1446,(int)35,(int)0,HX_("",00,00,00,00),(int)15,null());
HXLINE(  85)		this->add(this->vTextSkill);
HXLINE(  86)		this->vTextSkill->textField->set_multiline(true);
HXLINE(  87)		this->vTextSkill->textField->set_wordWrap(true);
HXLINE(  88)		this->vTextSkill->textField->set_width((int)150);
HXLINE(  90)		this->vTrapsGod =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  91)		this->vBombsGod =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  94)		this->vSkillsGod =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  95)		this->add(this->vSkillsGod);
HXLINE(  97)		this->add(this->vTrapsGod);
HXLINE(  98)		this->add(this->vBombsGod);
HXLINE( 100)		this->vSkillsGodText =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 101)		this->add(this->vSkillsGodText);
HXLINE( 102)		this->vSkillsController =  ::skill::SkillsController_obj::__alloc( HX_CTX );
HXLINE( 104)		this->setPlayerData();
HXLINE( 105)		this->setSkillsControllerData();
HXLINE( 106)		this->setGodData();
HXLINE( 108)		 ::flixel::FlxCamera _hx_tmp = ::flixel::FlxG_obj::camera;
HXDLIN( 108)		Float _hx_tmp1 = this->vMap->get_width();
HXDLIN( 108)		_hx_tmp->setScrollBoundsRect((int)0,(int)0,_hx_tmp1,this->vMap->get_height(),null());
HXLINE( 109)		{
HXLINE( 109)			 ::flixel::math::FlxRect _this = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 109)			Float Width = this->vMap->get_width();
HXDLIN( 109)			Float Height = this->vMap->get_height();
HXDLIN( 109)			_this->x = (int)0;
HXDLIN( 109)			_this->y = (int)0;
HXDLIN( 109)			_this->width = Width;
HXDLIN( 109)			_this->height = Height;
            		}
HXLINE( 111)		this->setCoinsData();
HXLINE( 112)		this->vPlayer->setCoins(this->vCoinsPlayer);
HXLINE( 114)		::String _hx_tmp2 = ((HX_("Objetos Jugador: ",12,d6,10,b2) + this->vPlayer->get_vCoinsCount()) + HX_("/",2f,00,00,00));
HXDLIN( 114)		this->vTextGame =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)50,(int)50,(int)0,(_hx_tmp2 + this->vCoinsPlayer->length),(int)20,null());
HXLINE( 115)		this->add(this->vTextGame);
HXLINE( 117)		this->vStunTextGod =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)50,(int)50,(int)0,HX_("Inmovilizado",09,14,a4,d5),(int)10,null());
HXLINE( 118)		this->vStunTextGod->set_visible(false);
HXLINE( 119)		this->add(this->vStunTextGod);
HXLINE( 121)		this->vStunTextPlayer =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)50,(int)50,(int)0,HX_("Inmovilizado",09,14,a4,d5),(int)10,null());
HXLINE( 122)		this->vStunTextPlayer->set_visible(false);
HXLINE( 123)		this->add(this->vStunTextPlayer);
            	}


void GameState_obj::setCoinsData(){
            	HX_GC_STACKFRAME(&_hx_pos_89fcaa4c5f66d414_127_setCoinsData)
HXLINE( 128)		this->vCoinsPlayer =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 129)		this->add(this->vCoinsPlayer);
HXLINE( 130)		{
HXLINE( 130)			int _g = (int)0;
HXDLIN( 130)			while((_g < (int)2)){
HXLINE( 130)				_g = (_g + (int)1);
HXDLIN( 130)				int i = (_g - (int)1);
HXLINE( 132)				 ::gameObjects::Coin c =  ::gameObjects::Coin_obj::__alloc( HX_CTX ,(int)0,(int)0);
HXLINE( 133)				this->setCoinXAndYRandom(this->vCoinsPlayer,c);
HXLINE( 134)				this->vCoinsPlayer->add(c).StaticCast<  ::flixel::FlxBasic >();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameState_obj,setCoinsData,(void))

void GameState_obj::setSkillsControllerData(){
            	HX_GC_STACKFRAME(&_hx_pos_89fcaa4c5f66d414_140_setSkillsControllerData)
HXLINE( 141)		this->vSkillsController->set_vSkills(this->vSkillsGod);
HXLINE( 142)		this->vSkillsController->set_vTextSkillDescription(this->vTextSkill);
HXLINE( 143)		this->vSkillsController->set_vTraps(this->vTrapsGod);
HXLINE( 144)		this->vSkillsController->set_vSkillsCountDownText(this->vSkillsGodText);
HXLINE( 145)		this->vSkillsController->set_vBombs(this->vBombsGod);
HXLINE( 147)		this->vProjectilesGod =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 148)		this->add(this->vProjectilesGod);
HXLINE( 149)		{
HXLINE( 149)			int _g = (int)0;
HXDLIN( 149)			while((_g < (int)1)){
HXLINE( 149)				_g = (_g + (int)1);
HXDLIN( 149)				int i = (_g - (int)1);
HXLINE( 151)				 ::gameObjects::ProjectilePlayer pro =  ::gameObjects::ProjectilePlayer_obj::__alloc( HX_CTX ,::GlobalGameData_obj::vPlayer1,(int)0,null());
HXLINE( 152)				this->vProjectilesGod->add(pro).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 153)				pro->kill();
            			}
            		}
HXLINE( 156)		this->vSkillsController->set_vProjectiles(this->vProjectilesGod);
HXLINE( 158)		this->vSkillsController->createAndAddSkills();
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameState_obj,setSkillsControllerData,(void))

void GameState_obj::setPlayerData(){
            	HX_GC_STACKFRAME(&_hx_pos_89fcaa4c5f66d414_161_setPlayerData)
HXLINE( 163)		this->vProjectilesPlayer =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 164)		this->add(this->vProjectilesPlayer);
HXLINE( 165)		{
HXLINE( 165)			int _g = (int)0;
HXDLIN( 165)			while((_g < (int)2)){
HXLINE( 165)				_g = (_g + (int)1);
HXDLIN( 165)				int i = (_g - (int)1);
HXLINE( 167)				 ::gameObjects::ProjectilePlayer pro =  ::gameObjects::ProjectilePlayer_obj::__alloc( HX_CTX ,::GlobalGameData_obj::vGod,(int)4,(int)550);
HXLINE( 168)				this->vProjectilesPlayer->add(pro).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 169)				pro->kill();
            			}
            		}
HXLINE( 172)		this->vPlayer->set_vProjectiles(this->vProjectilesPlayer);
HXLINE( 173)		this->add(this->vPlayer->vJumpSound);
HXLINE( 174)		::GlobalGameData_obj::vPlayer1 = this->vPlayer;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameState_obj,setPlayerData,(void))

void GameState_obj::setGodData(){
            	HX_STACKFRAME(&_hx_pos_89fcaa4c5f66d414_179_setGodData)
HXDLIN( 179)		this->vGod->vSkillsController = this->vSkillsController;
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameState_obj,setGodData,(void))

void GameState_obj::setCoinXAndYRandom( ::flixel::group::FlxTypedGroup otherCoins, ::gameObjects::Coin aCoin){
            	HX_STACKFRAME(&_hx_pos_89fcaa4c5f66d414_183_setCoinXAndYRandom)
HXLINE( 185)		::Array< ::Dynamic> coinCoordinates = this->vMap->getTileCoords((int)2,true);
HXLINE( 187)		Float rand = ::Math_obj::random();
HXLINE( 188)		int index = (::Math_obj::round((coinCoordinates->length * rand)) - (int)1);
HXLINE( 190)		Float coinCoordinates1 = coinCoordinates->__get(index).StaticCast<  ::flixel::math::FlxPoint >()->x;
HXDLIN( 190)		Float anX = (coinCoordinates1 - ((Float)aCoin->get_width() / (Float)(int)2));
HXLINE( 191)		Float coinCoordinates2 = coinCoordinates->__get(index).StaticCast<  ::flixel::math::FlxPoint >()->y;
HXDLIN( 191)		Float anY = (coinCoordinates2 - ((Float)aCoin->get_height() / (Float)(int)2));
HXLINE( 193)		bool _hx_tmp;
HXDLIN( 193)		if (hx::IsNotNull( otherCoins )) {
HXLINE( 193)			_hx_tmp = (otherCoins->length == (int)0);
            		}
            		else {
HXLINE( 193)			_hx_tmp = true;
            		}
HXDLIN( 193)		if (!(_hx_tmp)) {
HXLINE( 200)			while(::GlobalGameData_obj::thereIsACoinHere(anX,anY,otherCoins,(aCoin->get_width() * (int)6))){
HXLINE( 203)				rand = ::Math_obj::random();
HXLINE( 204)				index = (::Math_obj::round((coinCoordinates->length * rand)) - (int)1);
HXLINE( 206)				Float coinCoordinates3 = coinCoordinates->__get(index).StaticCast<  ::flixel::math::FlxPoint >()->x;
HXDLIN( 206)				anX = (coinCoordinates3 - ((Float)aCoin->get_width() / (Float)(int)2));
HXLINE( 207)				Float coinCoordinates4 = coinCoordinates->__get(index).StaticCast<  ::flixel::math::FlxPoint >()->y;
HXDLIN( 207)				anY = (coinCoordinates4 - ((Float)aCoin->get_height() / (Float)(int)2));
            			}
            		}
HXLINE( 213)		aCoin->set_x(anX);
HXLINE( 214)		aCoin->set_y(anY);
            	}


HX_DEFINE_DYNAMIC_FUNC2(GameState_obj,setCoinXAndYRandom,(void))

bool GameState_obj::playerCollectedAllCoins(){
            	HX_STACKFRAME(&_hx_pos_89fcaa4c5f66d414_220_playerCollectedAllCoins)
HXDLIN( 220)		return (this->vPlayer->get_vCoinsCount() == (int)2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameState_obj,playerCollectedAllCoins,return )

void GameState_obj::update(Float aDt){
            	HX_GC_STACKFRAME(&_hx_pos_89fcaa4c5f66d414_223_update)
HXLINE( 225)		this->super::update(aDt);
HXLINE( 227)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->vMap) ),( ( ::flixel::FlxBasic)(this->vPlayer) ),null(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 228)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->vMap) ),( ( ::flixel::FlxBasic)(this->vGod) ),null(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 229)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->vMap) ),( ( ::flixel::FlxBasic)(this->vBombsGod) ),this->mapVsBombs_dyn(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 231)		::flixel::FlxG_obj::overlap(this->vPlayer,this->vCoinsPlayer,this->playerVsCoins_dyn(),null());
HXLINE( 232)		::flixel::FlxG_obj::overlap(this->vProjectilesPlayer,this->vGod,this->projectilesVsGod_dyn(),null());
HXLINE( 233)		::flixel::FlxG_obj::overlap(this->vProjectilesGod,this->vPlayer,this->projectilesVsPlayer_dyn(),null());
HXLINE( 234)		::flixel::FlxG_obj::overlap(this->vPlayer,this->vGod,this->playerVsGod_dyn(),null());
HXLINE( 235)		::flixel::FlxG_obj::overlap(this->vPlayer,this->vTrapsGod,this->trapsVsPlayer_dyn(),null());
HXLINE( 236)		::flixel::FlxG_obj::overlap(this->vPlayer,this->vBombsGod,this->bombsVsPlayer_dyn(),null());
HXLINE( 238)		if (this->playerCollectedAllCoins()) {
HXLINE( 241)			this->vPlayer->set_vCoinsCount((int)0);
HXLINE( 243)			{
HXLINE( 243)				int _g = (int)0;
HXDLIN( 243)				while((_g < (int)2)){
HXLINE( 243)					_g = (_g + (int)1);
HXDLIN( 243)					int i = (_g - (int)1);
HXLINE( 245)					Dynamic( this->vProjectilesPlayer->members->__get(i)).StaticCast<  ::flixel::FlxBasic >()->revive();
HXLINE( 246)					Dynamic( this->vProjectilesPlayer->members->__get(i)).StaticCast<  ::flixel::FlxBasic >()->set_visible(false);
            				}
            			}
HXLINE( 249)			this->vPlayer->intanceProjectiles();
HXLINE( 250)			this->vResetPlaceCoin = true;
            		}
HXLINE( 253)		if ((this->vPlayer->vProjectilesCount != (int)-1)) {
HXLINE( 255)			 ::flixel::text::FlxText _hx_tmp = this->vTextGame;
HXDLIN( 255)			_hx_tmp->set_text((((HX_("\xc2""\xa1""Jugador puede matar a Dios (Espacio)! - Tiros: ",db,3e,4a,77) + (this->vProjectilesPlayer->length - this->vPlayer->vProjectilesCount)) + HX_("/",2f,00,00,00)) + this->vProjectilesPlayer->length));
            		}
HXLINE( 259)		bool _hx_tmp1;
HXDLIN( 259)		bool _hx_tmp2;
HXDLIN( 259)		bool _hx_tmp3;
HXDLIN( 259)		if (hx::IsNotNull( this->vProjectilesPlayer )) {
HXLINE( 259)			_hx_tmp3 = (this->vProjectilesPlayer->countDead() == (int)2);
            		}
            		else {
HXLINE( 259)			_hx_tmp3 = false;
            		}
HXDLIN( 259)		if (_hx_tmp3) {
HXLINE( 259)			_hx_tmp2 = this->vGod->exists;
            		}
            		else {
HXLINE( 259)			_hx_tmp2 = false;
            		}
HXDLIN( 259)		if (_hx_tmp2) {
HXLINE( 259)			_hx_tmp1 = this->vResetPlaceCoin;
            		}
            		else {
HXLINE( 259)			_hx_tmp1 = false;
            		}
HXDLIN( 259)		if (_hx_tmp1) {
HXLINE( 261)			this->vPlayer->vProjectilesCount = (int)-1;
HXLINE( 262)			this->vResetPlaceCoin = false;
HXLINE( 263)			this->shuffleCoins();
HXLINE( 264)			 ::flixel::text::FlxText _hx_tmp4 = this->vTextGame;
HXDLIN( 264)			::String _hx_tmp5 = ((HX_("Objetos Jugador: ",12,d6,10,b2) + this->vPlayer->get_vCoinsCount()) + HX_("/",2f,00,00,00));
HXDLIN( 264)			_hx_tmp4->set_text((_hx_tmp5 + this->vCoinsPlayer->length));
            		}
HXLINE( 267)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 267)		if (_this->keyManager->checkStatus((int)27,_this->status)) {
HXLINE( 270)			 ::flixel::FlxState nextState =  ::states::MainMenu_obj::__alloc( HX_CTX );
HXDLIN( 270)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 270)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 273)		bool _hx_tmp6;
HXDLIN( 273)		if ((this->vGod->vStateDuration != (int)-1)) {
HXLINE( 273)			_hx_tmp6 = (this->vGod->vState == HX_("Stunned",33,83,c6,83));
            		}
            		else {
HXLINE( 273)			_hx_tmp6 = false;
            		}
HXDLIN( 273)		if (_hx_tmp6) {
HXLINE( 275)			this->vStunTextGod->set_visible(true);
HXLINE( 276)			 ::flixel::text::FlxText _hx_tmp7 = this->vStunTextGod;
HXDLIN( 276)			Float _hx_tmp8 = this->vGod->x;
HXDLIN( 276)			Float _hx_tmp9 = (_hx_tmp8 + ((Float)this->vGod->get_width() / (Float)(int)2));
HXDLIN( 276)			Float _hx_tmp10 = (_hx_tmp9 - ((Float)this->vStunTextGod->get_width() / (Float)(int)2));
HXDLIN( 276)			_hx_tmp7->setPosition(_hx_tmp10,this->vGod->y);
            		}
            		else {
HXLINE( 279)			this->vStunTextGod->set_visible(false);
            		}
HXLINE( 283)		bool _hx_tmp11;
HXDLIN( 283)		if ((this->vPlayer->vStateDuration != (int)-1)) {
HXLINE( 283)			_hx_tmp11 = (this->vPlayer->vState == HX_("Stunned",33,83,c6,83));
            		}
            		else {
HXLINE( 283)			_hx_tmp11 = false;
            		}
HXDLIN( 283)		if (_hx_tmp11) {
HXLINE( 285)			this->vStunTextPlayer->set_visible(true);
HXLINE( 286)			 ::flixel::text::FlxText _hx_tmp12 = this->vStunTextPlayer;
HXDLIN( 286)			Float _hx_tmp13 = this->vPlayer->x;
HXDLIN( 286)			Float _hx_tmp14 = (_hx_tmp13 + ((Float)this->vPlayer->get_width() / (Float)(int)2));
HXDLIN( 286)			Float _hx_tmp15 = (_hx_tmp14 - ((Float)this->vStunTextPlayer->get_width() / (Float)(int)2));
HXDLIN( 286)			_hx_tmp12->setPosition(_hx_tmp15,this->vPlayer->y);
            		}
            		else {
HXLINE( 289)			this->vStunTextPlayer->set_visible(false);
            		}
            	}


void GameState_obj::shuffleCoins(){
            	HX_STACKFRAME(&_hx_pos_89fcaa4c5f66d414_296_shuffleCoins)
HXDLIN( 296)		int _g = (int)0;
HXDLIN( 296)		while((_g < (int)2)){
HXDLIN( 296)			_g = (_g + (int)1);
HXDLIN( 296)			int i = (_g - (int)1);
HXLINE( 298)			Dynamic( this->vCoinsPlayer->members->__get(i)).StaticCast<  ::flixel::FlxBasic >()->revive();
HXLINE( 299)			 ::gameObjects::Coin c = hx::TCast<  ::gameObjects::Coin >::cast(Dynamic( this->vCoinsPlayer->members->__get(i)).StaticCast<  ::flixel::FlxBasic >());
HXLINE( 301)			this->setCoinXAndYRandom(this->vCoinsPlayer,c);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameState_obj,shuffleCoins,(void))

void GameState_obj::playerVsCoins( ::gameObjects::Player1 aPlayer, ::gameObjects::Coin aCoin){
            	HX_STACKFRAME(&_hx_pos_89fcaa4c5f66d414_307_playerVsCoins)
HXLINE( 308)		aPlayer->set_vCoinsCount((aPlayer->get_vCoinsCount() + (int)1));
HXLINE( 309)		 ::flixel::text::FlxText _hx_tmp = this->vTextGame;
HXDLIN( 309)		::String _hx_tmp1 = ((HX_("Objetos Jugador: ",12,d6,10,b2) + this->vPlayer->get_vCoinsCount()) + HX_("/",2f,00,00,00));
HXDLIN( 309)		_hx_tmp->set_text((_hx_tmp1 + this->vCoinsPlayer->length));
HXLINE( 310)		aCoin->setPosition((int)0,(int)0);
HXLINE( 311)		aCoin->kill();
            	}


HX_DEFINE_DYNAMIC_FUNC2(GameState_obj,playerVsCoins,(void))

void GameState_obj::trapsVsPlayer( ::gameObjects::Player1 aPlayer, ::gameObjects::Trap aTrap){
            	HX_STACKFRAME(&_hx_pos_89fcaa4c5f66d414_317_trapsVsPlayer)
HXDLIN( 317)		if (aTrap->vCanCollide) {
HXLINE( 319)			aPlayer->vState = HX_("Stunned",33,83,c6,83);
HXLINE( 320)			aPlayer->vStateDuration = (int)2;
HXLINE( 321)			this->vTrapsGod->remove(aTrap,true).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 322)			aTrap->destroy();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(GameState_obj,trapsVsPlayer,(void))

void GameState_obj::mapVsBombs( ::flixel::tile::FlxTilemap aMap, ::gameObjects::Bomb aBomb){
            	HX_STACKFRAME(&_hx_pos_89fcaa4c5f66d414_327_mapVsBombs)
HXLINE( 328)		this->vBombsGod->remove(aBomb,true).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 329)		aBomb->destroy();
            	}


HX_DEFINE_DYNAMIC_FUNC2(GameState_obj,mapVsBombs,(void))

void GameState_obj::bombsVsPlayer( ::gameObjects::Player1 aPlayer, ::gameObjects::Bomb aBomb){
            	HX_GC_STACKFRAME(&_hx_pos_89fcaa4c5f66d414_333_bombsVsPlayer)
HXLINE( 334)		this->vBombsGod->remove(aBomb,true).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 335)		aBomb->destroy();
HXLINE( 336)		{
HXLINE( 336)			 ::flixel::FlxState nextState =  ::states::GameOverPlayer_obj::__alloc( HX_CTX );
HXDLIN( 336)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 336)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(GameState_obj,bombsVsPlayer,(void))

void GameState_obj::projectilesVsGod( ::gameObjects::ProjectilePlayer aProjectile, ::gameObjects::God aGod){
            	HX_GC_STACKFRAME(&_hx_pos_89fcaa4c5f66d414_341_projectilesVsGod)
HXDLIN( 341)		bool _hx_tmp;
HXDLIN( 341)		if (hx::IsNotNull( aProjectile->vTarget )) {
HXDLIN( 341)			_hx_tmp = hx::IsEq( aProjectile->vTarget,aGod );
            		}
            		else {
HXDLIN( 341)			_hx_tmp = false;
            		}
HXDLIN( 341)		if (_hx_tmp) {
HXLINE( 343)			 ::flixel::FlxState nextState =  ::states::GameWinPlayer_obj::__alloc( HX_CTX );
HXDLIN( 343)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 343)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(GameState_obj,projectilesVsGod,(void))

void GameState_obj::projectilesVsPlayer( ::gameObjects::ProjectilePlayer aProjectile, ::gameObjects::Player1 aPlayer){
            	HX_GC_STACKFRAME(&_hx_pos_89fcaa4c5f66d414_350_projectilesVsPlayer)
HXDLIN( 350)		bool _hx_tmp;
HXDLIN( 350)		if (hx::IsNotNull( aProjectile->vTarget )) {
HXDLIN( 350)			_hx_tmp = hx::IsNotEq( aProjectile->vTarget,this->vGod );
            		}
            		else {
HXDLIN( 350)			_hx_tmp = false;
            		}
HXDLIN( 350)		if (_hx_tmp) {
HXLINE( 352)			 ::flixel::FlxState nextState =  ::states::GameOverPlayer_obj::__alloc( HX_CTX );
HXDLIN( 352)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 352)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(GameState_obj,projectilesVsPlayer,(void))

void GameState_obj::playerVsGod( ::gameObjects::Player1 aPlayer, ::gameObjects::God aGod){
            	HX_STACKFRAME(&_hx_pos_89fcaa4c5f66d414_357_playerVsGod)
HXLINE( 358)		aGod->vState = HX_("Stunned",33,83,c6,83);
HXLINE( 359)		aGod->vStateDuration = (int)3;
            	}


HX_DEFINE_DYNAMIC_FUNC2(GameState_obj,playerVsGod,(void))

void GameState_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_89fcaa4c5f66d414_364_destroy)
HXDLIN( 364)		this->super::destroy();
            	}


int GameState_obj::cNumberProjectilesPlayer;

int GameState_obj::cNumberTotalCoins;


hx::ObjectPtr< GameState_obj > GameState_obj::__new() {
	hx::ObjectPtr< GameState_obj > __this = new GameState_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< GameState_obj > GameState_obj::__alloc(hx::Ctx *_hx_ctx) {
	GameState_obj *__this = (GameState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GameState_obj), true, "states.GameState"));
	*(void **)__this = GameState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

GameState_obj::GameState_obj()
{
}

void GameState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GameState);
	HX_MARK_MEMBER_NAME(vMap,"vMap");
	HX_MARK_MEMBER_NAME(vPlayer,"vPlayer");
	HX_MARK_MEMBER_NAME(vGod,"vGod");
	HX_MARK_MEMBER_NAME(vProjectilesPlayer,"vProjectilesPlayer");
	HX_MARK_MEMBER_NAME(vProjectilesGod,"vProjectilesGod");
	HX_MARK_MEMBER_NAME(vTrapsGod,"vTrapsGod");
	HX_MARK_MEMBER_NAME(vBombsGod,"vBombsGod");
	HX_MARK_MEMBER_NAME(vBackgroundSound,"vBackgroundSound");
	HX_MARK_MEMBER_NAME(vCoinsPlayer,"vCoinsPlayer");
	HX_MARK_MEMBER_NAME(vResetPlaceCoin,"vResetPlaceCoin");
	HX_MARK_MEMBER_NAME(vBackgroundSprite,"vBackgroundSprite");
	HX_MARK_MEMBER_NAME(vTextGame,"vTextGame");
	HX_MARK_MEMBER_NAME(vTextSkill,"vTextSkill");
	HX_MARK_MEMBER_NAME(vStunTextGod,"vStunTextGod");
	HX_MARK_MEMBER_NAME(vStunTextPlayer,"vStunTextPlayer");
	HX_MARK_MEMBER_NAME(vSkillsGod,"vSkillsGod");
	HX_MARK_MEMBER_NAME(vSkillsGodText,"vSkillsGodText");
	HX_MARK_MEMBER_NAME(vSkillsController,"vSkillsController");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GameState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(vMap,"vMap");
	HX_VISIT_MEMBER_NAME(vPlayer,"vPlayer");
	HX_VISIT_MEMBER_NAME(vGod,"vGod");
	HX_VISIT_MEMBER_NAME(vProjectilesPlayer,"vProjectilesPlayer");
	HX_VISIT_MEMBER_NAME(vProjectilesGod,"vProjectilesGod");
	HX_VISIT_MEMBER_NAME(vTrapsGod,"vTrapsGod");
	HX_VISIT_MEMBER_NAME(vBombsGod,"vBombsGod");
	HX_VISIT_MEMBER_NAME(vBackgroundSound,"vBackgroundSound");
	HX_VISIT_MEMBER_NAME(vCoinsPlayer,"vCoinsPlayer");
	HX_VISIT_MEMBER_NAME(vResetPlaceCoin,"vResetPlaceCoin");
	HX_VISIT_MEMBER_NAME(vBackgroundSprite,"vBackgroundSprite");
	HX_VISIT_MEMBER_NAME(vTextGame,"vTextGame");
	HX_VISIT_MEMBER_NAME(vTextSkill,"vTextSkill");
	HX_VISIT_MEMBER_NAME(vStunTextGod,"vStunTextGod");
	HX_VISIT_MEMBER_NAME(vStunTextPlayer,"vStunTextPlayer");
	HX_VISIT_MEMBER_NAME(vSkillsGod,"vSkillsGod");
	HX_VISIT_MEMBER_NAME(vSkillsGodText,"vSkillsGodText");
	HX_VISIT_MEMBER_NAME(vSkillsController,"vSkillsController");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val GameState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"vMap") ) { return hx::Val( vMap ); }
		if (HX_FIELD_EQ(inName,"vGod") ) { return hx::Val( vGod ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"vPlayer") ) { return hx::Val( vPlayer ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"vTrapsGod") ) { return hx::Val( vTrapsGod ); }
		if (HX_FIELD_EQ(inName,"vBombsGod") ) { return hx::Val( vBombsGod ); }
		if (HX_FIELD_EQ(inName,"vTextGame") ) { return hx::Val( vTextGame ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"vTextSkill") ) { return hx::Val( vTextSkill ); }
		if (HX_FIELD_EQ(inName,"vSkillsGod") ) { return hx::Val( vSkillsGod ); }
		if (HX_FIELD_EQ(inName,"setGodData") ) { return hx::Val( setGodData_dyn() ); }
		if (HX_FIELD_EQ(inName,"mapVsBombs") ) { return hx::Val( mapVsBombs_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"playerVsGod") ) { return hx::Val( playerVsGod_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"vCoinsPlayer") ) { return hx::Val( vCoinsPlayer ); }
		if (HX_FIELD_EQ(inName,"vStunTextGod") ) { return hx::Val( vStunTextGod ); }
		if (HX_FIELD_EQ(inName,"setCoinsData") ) { return hx::Val( setCoinsData_dyn() ); }
		if (HX_FIELD_EQ(inName,"shuffleCoins") ) { return hx::Val( shuffleCoins_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setPlayerData") ) { return hx::Val( setPlayerData_dyn() ); }
		if (HX_FIELD_EQ(inName,"playerVsCoins") ) { return hx::Val( playerVsCoins_dyn() ); }
		if (HX_FIELD_EQ(inName,"trapsVsPlayer") ) { return hx::Val( trapsVsPlayer_dyn() ); }
		if (HX_FIELD_EQ(inName,"bombsVsPlayer") ) { return hx::Val( bombsVsPlayer_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"vSkillsGodText") ) { return hx::Val( vSkillsGodText ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"vProjectilesGod") ) { return hx::Val( vProjectilesGod ); }
		if (HX_FIELD_EQ(inName,"vResetPlaceCoin") ) { return hx::Val( vResetPlaceCoin ); }
		if (HX_FIELD_EQ(inName,"vStunTextPlayer") ) { return hx::Val( vStunTextPlayer ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"vBackgroundSound") ) { return hx::Val( vBackgroundSound ); }
		if (HX_FIELD_EQ(inName,"projectilesVsGod") ) { return hx::Val( projectilesVsGod_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"vBackgroundSprite") ) { return hx::Val( vBackgroundSprite ); }
		if (HX_FIELD_EQ(inName,"vSkillsController") ) { return hx::Val( vSkillsController ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"vProjectilesPlayer") ) { return hx::Val( vProjectilesPlayer ); }
		if (HX_FIELD_EQ(inName,"setCoinXAndYRandom") ) { return hx::Val( setCoinXAndYRandom_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"projectilesVsPlayer") ) { return hx::Val( projectilesVsPlayer_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"setSkillsControllerData") ) { return hx::Val( setSkillsControllerData_dyn() ); }
		if (HX_FIELD_EQ(inName,"playerCollectedAllCoins") ) { return hx::Val( playerCollectedAllCoins_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val GameState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"vMap") ) { vMap=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vGod") ) { vGod=inValue.Cast<  ::gameObjects::God >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"vPlayer") ) { vPlayer=inValue.Cast<  ::gameObjects::Player1 >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"vTrapsGod") ) { vTrapsGod=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vBombsGod") ) { vBombsGod=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vTextGame") ) { vTextGame=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"vTextSkill") ) { vTextSkill=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vSkillsGod") ) { vSkillsGod=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"vCoinsPlayer") ) { vCoinsPlayer=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vStunTextGod") ) { vStunTextGod=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"vSkillsGodText") ) { vSkillsGodText=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"vProjectilesGod") ) { vProjectilesGod=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vResetPlaceCoin") ) { vResetPlaceCoin=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vStunTextPlayer") ) { vStunTextPlayer=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"vBackgroundSound") ) { vBackgroundSound=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"vBackgroundSprite") ) { vBackgroundSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vSkillsController") ) { vSkillsController=inValue.Cast<  ::skill::SkillsController >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"vProjectilesPlayer") ) { vProjectilesPlayer=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GameState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("vMap","\xc6","\xef","\x39","\x4e"));
	outFields->push(HX_HCSTRING("vPlayer","\x77","\x1c","\x32","\x97"));
	outFields->push(HX_HCSTRING("vGod","\x66","\x6e","\x35","\x4e"));
	outFields->push(HX_HCSTRING("vProjectilesPlayer","\x15","\x8c","\x10","\x2d"));
	outFields->push(HX_HCSTRING("vProjectilesGod","\x08","\x30","\x1a","\x7c"));
	outFields->push(HX_HCSTRING("vTrapsGod","\x8c","\x7d","\x1b","\x16"));
	outFields->push(HX_HCSTRING("vBombsGod","\x81","\x48","\x7b","\x50"));
	outFields->push(HX_HCSTRING("vBackgroundSound","\x2b","\x66","\x76","\x74"));
	outFields->push(HX_HCSTRING("vCoinsPlayer","\xed","\x65","\xdf","\x9b"));
	outFields->push(HX_HCSTRING("vResetPlaceCoin","\x3f","\xe1","\xb4","\xc6"));
	outFields->push(HX_HCSTRING("vBackgroundSprite","\x29","\x33","\x8a","\x04"));
	outFields->push(HX_HCSTRING("vTextGame","\xd5","\x69","\x52","\x5c"));
	outFields->push(HX_HCSTRING("vTextSkill","\x4e","\x46","\x32","\x5b"));
	outFields->push(HX_HCSTRING("vStunTextGod","\x9f","\xab","\x28","\xa0"));
	outFields->push(HX_HCSTRING("vStunTextPlayer","\xde","\x28","\xd0","\x36"));
	outFields->push(HX_HCSTRING("vSkillsGod","\x44","\x1d","\x07","\xa7"));
	outFields->push(HX_HCSTRING("vSkillsGodText","\x11","\x08","\x6c","\x34"));
	outFields->push(HX_HCSTRING("vSkillsController","\x94","\x15","\x94","\x18"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo GameState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(GameState_obj,vMap),HX_HCSTRING("vMap","\xc6","\xef","\x39","\x4e")},
	{hx::fsObject /*::gameObjects::Player1*/ ,(int)offsetof(GameState_obj,vPlayer),HX_HCSTRING("vPlayer","\x77","\x1c","\x32","\x97")},
	{hx::fsObject /*::gameObjects::God*/ ,(int)offsetof(GameState_obj,vGod),HX_HCSTRING("vGod","\x66","\x6e","\x35","\x4e")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(GameState_obj,vProjectilesPlayer),HX_HCSTRING("vProjectilesPlayer","\x15","\x8c","\x10","\x2d")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(GameState_obj,vProjectilesGod),HX_HCSTRING("vProjectilesGod","\x08","\x30","\x1a","\x7c")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(GameState_obj,vTrapsGod),HX_HCSTRING("vTrapsGod","\x8c","\x7d","\x1b","\x16")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(GameState_obj,vBombsGod),HX_HCSTRING("vBombsGod","\x81","\x48","\x7b","\x50")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(GameState_obj,vBackgroundSound),HX_HCSTRING("vBackgroundSound","\x2b","\x66","\x76","\x74")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(GameState_obj,vCoinsPlayer),HX_HCSTRING("vCoinsPlayer","\xed","\x65","\xdf","\x9b")},
	{hx::fsBool,(int)offsetof(GameState_obj,vResetPlaceCoin),HX_HCSTRING("vResetPlaceCoin","\x3f","\xe1","\xb4","\xc6")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(GameState_obj,vBackgroundSprite),HX_HCSTRING("vBackgroundSprite","\x29","\x33","\x8a","\x04")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(GameState_obj,vTextGame),HX_HCSTRING("vTextGame","\xd5","\x69","\x52","\x5c")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(GameState_obj,vTextSkill),HX_HCSTRING("vTextSkill","\x4e","\x46","\x32","\x5b")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(GameState_obj,vStunTextGod),HX_HCSTRING("vStunTextGod","\x9f","\xab","\x28","\xa0")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(GameState_obj,vStunTextPlayer),HX_HCSTRING("vStunTextPlayer","\xde","\x28","\xd0","\x36")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(GameState_obj,vSkillsGod),HX_HCSTRING("vSkillsGod","\x44","\x1d","\x07","\xa7")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(GameState_obj,vSkillsGodText),HX_HCSTRING("vSkillsGodText","\x11","\x08","\x6c","\x34")},
	{hx::fsObject /*::skill::SkillsController*/ ,(int)offsetof(GameState_obj,vSkillsController),HX_HCSTRING("vSkillsController","\x94","\x15","\x94","\x18")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo GameState_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &GameState_obj::cNumberProjectilesPlayer,HX_HCSTRING("cNumberProjectilesPlayer","\x3f","\x4c","\xf7","\x1c")},
	{hx::fsInt,(void *) &GameState_obj::cNumberTotalCoins,HX_HCSTRING("cNumberTotalCoins","\x0a","\x72","\xb1","\x9e")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String GameState_obj_sMemberFields[] = {
	HX_HCSTRING("vMap","\xc6","\xef","\x39","\x4e"),
	HX_HCSTRING("vPlayer","\x77","\x1c","\x32","\x97"),
	HX_HCSTRING("vGod","\x66","\x6e","\x35","\x4e"),
	HX_HCSTRING("vProjectilesPlayer","\x15","\x8c","\x10","\x2d"),
	HX_HCSTRING("vProjectilesGod","\x08","\x30","\x1a","\x7c"),
	HX_HCSTRING("vTrapsGod","\x8c","\x7d","\x1b","\x16"),
	HX_HCSTRING("vBombsGod","\x81","\x48","\x7b","\x50"),
	HX_HCSTRING("vBackgroundSound","\x2b","\x66","\x76","\x74"),
	HX_HCSTRING("vCoinsPlayer","\xed","\x65","\xdf","\x9b"),
	HX_HCSTRING("vResetPlaceCoin","\x3f","\xe1","\xb4","\xc6"),
	HX_HCSTRING("vBackgroundSprite","\x29","\x33","\x8a","\x04"),
	HX_HCSTRING("vTextGame","\xd5","\x69","\x52","\x5c"),
	HX_HCSTRING("vTextSkill","\x4e","\x46","\x32","\x5b"),
	HX_HCSTRING("vStunTextGod","\x9f","\xab","\x28","\xa0"),
	HX_HCSTRING("vStunTextPlayer","\xde","\x28","\xd0","\x36"),
	HX_HCSTRING("vSkillsGod","\x44","\x1d","\x07","\xa7"),
	HX_HCSTRING("vSkillsGodText","\x11","\x08","\x6c","\x34"),
	HX_HCSTRING("vSkillsController","\x94","\x15","\x94","\x18"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("setCoinsData","\x0a","\x75","\x6b","\xf2"),
	HX_HCSTRING("setSkillsControllerData","\x0a","\xab","\xa9","\xe7"),
	HX_HCSTRING("setPlayerData","\x6d","\x70","\x9d","\x46"),
	HX_HCSTRING("setGodData","\x04","\x7e","\xed","\x30"),
	HX_HCSTRING("setCoinXAndYRandom","\x4a","\x34","\x06","\xee"),
	HX_HCSTRING("playerCollectedAllCoins","\xe9","\x09","\xc4","\xa3"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("shuffleCoins","\x09","\x0d","\x4d","\x66"),
	HX_HCSTRING("playerVsCoins","\xe4","\xaf","\xef","\x7a"),
	HX_HCSTRING("trapsVsPlayer","\x84","\xfe","\x28","\xeb"),
	HX_HCSTRING("mapVsBombs","\x18","\x28","\xa4","\x10"),
	HX_HCSTRING("bombsVsPlayer","\x6f","\x5b","\xbc","\xc4"),
	HX_HCSTRING("projectilesVsGod","\x35","\x87","\x40","\x8a"),
	HX_HCSTRING("projectilesVsPlayer","\x08","\x2f","\xf9","\x99"),
	HX_HCSTRING("playerVsGod","\xde","\xe2","\x60","\x44"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	::String(null()) };

static void GameState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GameState_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(GameState_obj::cNumberProjectilesPlayer,"cNumberProjectilesPlayer");
	HX_MARK_MEMBER_NAME(GameState_obj::cNumberTotalCoins,"cNumberTotalCoins");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GameState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GameState_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(GameState_obj::cNumberProjectilesPlayer,"cNumberProjectilesPlayer");
	HX_VISIT_MEMBER_NAME(GameState_obj::cNumberTotalCoins,"cNumberTotalCoins");
};

#endif

hx::Class GameState_obj::__mClass;

static ::String GameState_obj_sStaticFields[] = {
	HX_HCSTRING("cNumberProjectilesPlayer","\x3f","\x4c","\xf7","\x1c"),
	HX_HCSTRING("cNumberTotalCoins","\x0a","\x72","\xb1","\x9e"),
	::String(null())
};

void GameState_obj::__register()
{
	hx::Object *dummy = new GameState_obj;
	GameState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("states.GameState","\x73","\x8e","\x57","\x18");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GameState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(GameState_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GameState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GameState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GameState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GameState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GameState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void GameState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_89fcaa4c5f66d414_47_boot)
HXDLIN(  47)		cNumberProjectilesPlayer = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_89fcaa4c5f66d414_48_boot)
HXDLIN(  48)		cNumberTotalCoins = (int)2;
            	}
}

} // end namespace states
