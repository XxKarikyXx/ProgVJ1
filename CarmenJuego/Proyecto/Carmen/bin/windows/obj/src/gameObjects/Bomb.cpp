// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_gameObjects_Bomb
#include <gameObjects/Bomb.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2c3bba913481adac_10_new,"gameObjects.Bomb","new",0x3e72c760,"gameObjects.Bomb.new","gameObjects/Bomb.hx",10,0x025fb62f)
HX_LOCAL_STACK_FRAME(_hx_pos_2c3bba913481adac_24_update,"gameObjects.Bomb","update",0xb35aef09,"gameObjects.Bomb.update","gameObjects/Bomb.hx",24,0x025fb62f)
HX_LOCAL_STACK_FRAME(_hx_pos_2c3bba913481adac_29_destroy,"gameObjects.Bomb","destroy",0xc2eca3fa,"gameObjects.Bomb.destroy","gameObjects/Bomb.hx",29,0x025fb62f)
namespace gameObjects{

void Bomb_obj::__construct( ::Dynamic __o_aX, ::Dynamic __o_aY, ::Dynamic __o_aRad){
 ::Dynamic aX = __o_aX.Default(0);
 ::Dynamic aY = __o_aY.Default(0);
 ::Dynamic aRad = __o_aRad.Default(0);
            	HX_STACKFRAME(&_hx_pos_2c3bba913481adac_10_new)
HXLINE(  12)		this->vCanCollide = true;
HXLINE(  16)		super::__construct(aX,aY,null());
HXLINE(  17)		this->makeGraphic((aRad * (int)2),(aRad * (int)2),(int)0,true,null());
HXLINE(  18)		::flixel::util::FlxSpriteUtil_obj::drawCircle(hx::ObjectPtr<OBJ_>(this),aRad,aRad,aRad,(int)-65536,null(),null());
HXLINE(  19)		this->velocity->set_y((int)800);
            	}

Dynamic Bomb_obj::__CreateEmpty() { return new Bomb_obj; }

void *Bomb_obj::_hx_vtable = 0;

Dynamic Bomb_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Bomb_obj > _hx_result = new Bomb_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Bomb_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x40474dc4;
	}
}

void Bomb_obj::update(Float aDt){
            	HX_STACKFRAME(&_hx_pos_2c3bba913481adac_24_update)
HXDLIN(  24)		this->super::update(aDt);
            	}


void Bomb_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_2c3bba913481adac_29_destroy)
HXDLIN(  29)		this->super::destroy();
            	}



hx::ObjectPtr< Bomb_obj > Bomb_obj::__new( ::Dynamic __o_aX, ::Dynamic __o_aY, ::Dynamic __o_aRad) {
	hx::ObjectPtr< Bomb_obj > __this = new Bomb_obj();
	__this->__construct(__o_aX,__o_aY,__o_aRad);
	return __this;
}

hx::ObjectPtr< Bomb_obj > Bomb_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic __o_aX, ::Dynamic __o_aY, ::Dynamic __o_aRad) {
	Bomb_obj *__this = (Bomb_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Bomb_obj), true, "gameObjects.Bomb"));
	*(void **)__this = Bomb_obj::_hx_vtable;
	__this->__construct(__o_aX,__o_aY,__o_aRad);
	return __this;
}

Bomb_obj::Bomb_obj()
{
}

hx::Val Bomb_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"vCanCollide") ) { return hx::Val( vCanCollide ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Bomb_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"vCanCollide") ) { vCanCollide=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Bomb_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("vCanCollide","\x64","\x79","\xdd","\xf5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Bomb_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Bomb_obj,vCanCollide),HX_HCSTRING("vCanCollide","\x64","\x79","\xdd","\xf5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Bomb_obj_sStaticStorageInfo = 0;
#endif

static ::String Bomb_obj_sMemberFields[] = {
	HX_HCSTRING("vCanCollide","\x64","\x79","\xdd","\xf5"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	::String(null()) };

static void Bomb_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Bomb_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Bomb_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Bomb_obj::__mClass,"__mClass");
};

#endif

hx::Class Bomb_obj::__mClass;

void Bomb_obj::__register()
{
	hx::Object *dummy = new Bomb_obj;
	Bomb_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("gameObjects.Bomb","\x6e","\xd7","\x6b","\x11");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Bomb_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Bomb_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Bomb_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Bomb_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Bomb_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Bomb_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace gameObjects
