// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_states_MainMenu
#include <states/MainMenu.h>
#endif
#ifndef INCLUDED_states_MainMenuInstructions
#include <states/MainMenuInstructions.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a706047e50bdda31_19_new,"states.MainMenuInstructions","new",0xc1b2d57b,"states.MainMenuInstructions.new","states/MainMenuInstructions.hx",19,0xee8a9274)
HX_LOCAL_STACK_FRAME(_hx_pos_a706047e50bdda31_22_create,"states.MainMenuInstructions","create",0xfffa44c1,"states.MainMenuInstructions.create","states/MainMenuInstructions.hx",22,0xee8a9274)
HX_LOCAL_STACK_FRAME(_hx_pos_a706047e50bdda31_48_update,"states.MainMenuInstructions","update",0x0af063ce,"states.MainMenuInstructions.update","states/MainMenuInstructions.hx",48,0xee8a9274)
HX_LOCAL_STACK_FRAME(_hx_pos_a706047e50bdda31_61_destroy,"states.MainMenuInstructions","destroy",0x0e1d5b95,"states.MainMenuInstructions.destroy","states/MainMenuInstructions.hx",61,0xee8a9274)
namespace states{

void MainMenuInstructions_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a706047e50bdda31_19_new)
HXDLIN(  19)		super::__construct(null());
            	}

Dynamic MainMenuInstructions_obj::__CreateEmpty() { return new MainMenuInstructions_obj; }

void *MainMenuInstructions_obj::_hx_vtable = 0;

Dynamic MainMenuInstructions_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< MainMenuInstructions_obj > _hx_result = new MainMenuInstructions_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MainMenuInstructions_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c || inClassId==(int)0x61934adf;
	}
}

void MainMenuInstructions_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_a706047e50bdda31_22_create)
HXLINE(  23)		 ::flixel::text::FlxText mp =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)100,(int)0,HX_("Instrucciones",8d,5b,43,a6),(int)70,null());
HXLINE(  24)		mp->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  25)		this->add(mp);
HXLINE(  27)		Float godTxt = mp->get_height();
HXDLIN(  27)		 ::flixel::text::FlxText godTxt1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)100,((godTxt + ::Std_obj::_hx_int(((Float)::flixel::FlxG_obj::height / (Float)(int)9))) + (int)100),(int)0,HX_("Jugador 1: Recolecta todos los objetos del mapa, evitando que Dios te mate. Te mueves con a y d, saltas con w.",d5,c3,6d,bd),(int)20,null());
HXLINE(  28)		godTxt1->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  29)		this->add(godTxt1);
HXLINE(  31)		Float godTxt2 = godTxt1->get_height();
HXDLIN(  31)		Float godTxt21 = (godTxt2 + mp->get_height());
HXDLIN(  31)		 ::flixel::text::FlxText godTxt22 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)100,((godTxt21 + ::Std_obj::_hx_int(((Float)::flixel::FlxG_obj::height / (Float)(int)9))) + (int)100),(int)0,HX_("Al recolectar todos los objetos podr\xc3""\xa1""s matar al Dios disparando proyectiles con ESPACIO.",a9,05,26,71),(int)20,null());
HXLINE(  32)		godTxt22->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  33)		this->add(godTxt22);
HXLINE(  35)		Float player1Txt = mp->get_height();
HXDLIN(  35)		 ::flixel::text::FlxText player1Txt1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)100,((player1Txt + (::Std_obj::_hx_int(((Float)::flixel::FlxG_obj::height / (Float)(int)9)) * (int)2)) + (int)200),(int)0,HX_("Dios: Intenta matar a Jugador 1 antes de que \xc3""\xa9""l te mate a ti.",a6,2d,26,7c),(int)20,null());
HXLINE(  36)		player1Txt1->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  37)		this->add(player1Txt1);
HXLINE(  38)		Float player1Txt2 = player1Txt1->get_height();
HXDLIN(  38)		Float player1Txt21 = (player1Txt2 + mp->get_height());
HXDLIN(  38)		 ::flixel::text::FlxText player1Txt22 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)100,((player1Txt21 + (::Std_obj::_hx_int(((Float)::flixel::FlxG_obj::height / (Float)(int)9)) * (int)2)) + (int)200),(int)0,HX_("Te mueves con las flechas. Con el mouse seleccionas y disparas habilidades.",61,c4,69,0b),(int)20,null());
HXLINE(  39)		player1Txt22->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  40)		this->add(player1Txt22);
HXLINE(  42)		Float backTxt = mp->get_height();
HXDLIN(  42)		 ::flixel::text::FlxText backTxt1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)100,((backTxt + (::Std_obj::_hx_int(((Float)::flixel::FlxG_obj::height / (Float)(int)9)) * (int)3)) + (int)300),(int)0,HX_("Para ir al men\xc3""\xba"" principal s\xc3""\xb3""lo presione la tecla ESCAPE.",ff,70,4e,f6),(int)20,null());
HXLINE(  43)		backTxt1->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  44)		this->add(backTxt1);
            	}


void MainMenuInstructions_obj::update(Float aDt){
            	HX_GC_STACKFRAME(&_hx_pos_a706047e50bdda31_48_update)
HXLINE(  49)		this->super::update(aDt);
HXLINE(  51)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  51)		if (_this->keyManager->checkStatus((int)27,_this->status)) {
HXLINE(  54)			 ::flixel::FlxState nextState =  ::states::MainMenu_obj::__alloc( HX_CTX );
HXDLIN(  54)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  54)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


void MainMenuInstructions_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_a706047e50bdda31_61_destroy)
HXDLIN(  61)		this->super::destroy();
            	}



hx::ObjectPtr< MainMenuInstructions_obj > MainMenuInstructions_obj::__new() {
	hx::ObjectPtr< MainMenuInstructions_obj > __this = new MainMenuInstructions_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< MainMenuInstructions_obj > MainMenuInstructions_obj::__alloc(hx::Ctx *_hx_ctx) {
	MainMenuInstructions_obj *__this = (MainMenuInstructions_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(MainMenuInstructions_obj), true, "states.MainMenuInstructions"));
	*(void **)__this = MainMenuInstructions_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MainMenuInstructions_obj::MainMenuInstructions_obj()
{
}

void MainMenuInstructions_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MainMenuInstructions);
	HX_MARK_MEMBER_NAME(vBack,"vBack");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MainMenuInstructions_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(vBack,"vBack");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val MainMenuInstructions_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"vBack") ) { return hx::Val( vBack ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val MainMenuInstructions_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"vBack") ) { vBack=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MainMenuInstructions_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("vBack","\xbd","\x79","\x32","\x1d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo MainMenuInstructions_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::ui::FlxButton*/ ,(int)offsetof(MainMenuInstructions_obj,vBack),HX_HCSTRING("vBack","\xbd","\x79","\x32","\x1d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *MainMenuInstructions_obj_sStaticStorageInfo = 0;
#endif

static ::String MainMenuInstructions_obj_sMemberFields[] = {
	HX_HCSTRING("vBack","\xbd","\x79","\x32","\x1d"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	::String(null()) };

static void MainMenuInstructions_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MainMenuInstructions_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MainMenuInstructions_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MainMenuInstructions_obj::__mClass,"__mClass");
};

#endif

hx::Class MainMenuInstructions_obj::__mClass;

void MainMenuInstructions_obj::__register()
{
	hx::Object *dummy = new MainMenuInstructions_obj;
	MainMenuInstructions_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("states.MainMenuInstructions","\x09","\xfc","\xad","\x9f");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = MainMenuInstructions_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(MainMenuInstructions_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< MainMenuInstructions_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MainMenuInstructions_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MainMenuInstructions_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MainMenuInstructions_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
