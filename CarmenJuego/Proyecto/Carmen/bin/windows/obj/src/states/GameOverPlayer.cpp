// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_states_GameOverPlayer
#include <states/GameOverPlayer.h>
#endif
#ifndef INCLUDED_states_GameState
#include <states/GameState.h>
#endif
#ifndef INCLUDED_states_MainMenu
#include <states/MainMenu.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a54d0caa545de696_16_new,"states.GameOverPlayer","new",0x8abb22a5,"states.GameOverPlayer.new","states/GameOverPlayer.hx",16,0xdd0ea74a)
HX_LOCAL_STACK_FRAME(_hx_pos_a54d0caa545de696_20_create,"states.GameOverPlayer","create",0x8d230dd7,"states.GameOverPlayer.create","states/GameOverPlayer.hx",20,0xdd0ea74a)
HX_LOCAL_STACK_FRAME(_hx_pos_a54d0caa545de696_26_update,"states.GameOverPlayer","update",0x98192ce4,"states.GameOverPlayer.update","states/GameOverPlayer.hx",26,0xdd0ea74a)
HX_LOCAL_STACK_FRAME(_hx_pos_a54d0caa545de696_41_destroy,"states.GameOverPlayer","destroy",0x04a485bf,"states.GameOverPlayer.destroy","states/GameOverPlayer.hx",41,0xdd0ea74a)
namespace states{

void GameOverPlayer_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a54d0caa545de696_16_new)
HXDLIN(  16)		super::__construct(null());
            	}

Dynamic GameOverPlayer_obj::__CreateEmpty() { return new GameOverPlayer_obj; }

void *GameOverPlayer_obj::_hx_vtable = 0;

Dynamic GameOverPlayer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< GameOverPlayer_obj > _hx_result = new GameOverPlayer_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool GameOverPlayer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2335d9a7) {
		if (inClassId<=(int)0x0b145ae1) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b145ae1;
		} else {
			return inClassId==(int)0x2335d9a7;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x3634c52c;
	}
}

void GameOverPlayer_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_a54d0caa545de696_20_create)
HXLINE(  21)		this->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)500,(int)500,(int)0,HX_("Gana Dios",1c,84,fd,6d),(int)100,null()));
HXLINE(  22)		this->add( ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)600,(int)650,(int)0,HX_("Presione ENTER para re iniciar",f3,b5,0e,4a),(int)20,null()));
            	}


void GameOverPlayer_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_a54d0caa545de696_26_update)
HXLINE(  27)		this->super::update(elapsed);
HXLINE(  28)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  28)		if (_this->keyManager->checkStatus((int)13,_this->status)) {
HXLINE(  30)			 ::flixel::FlxState nextState =  ::states::GameState_obj::__alloc( HX_CTX );
HXDLIN(  30)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  30)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE(  33)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  33)		if (_this1->keyManager->checkStatus((int)27,_this1->status)) {
HXLINE(  35)			 ::flixel::FlxState nextState1 =  ::states::MainMenu_obj::__alloc( HX_CTX );
HXDLIN(  35)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState1)) {
HXLINE(  35)				::flixel::FlxG_obj::game->_requestedState = nextState1;
            			}
            		}
            	}


void GameOverPlayer_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_a54d0caa545de696_41_destroy)
HXDLIN(  41)		this->super::destroy();
            	}



hx::ObjectPtr< GameOverPlayer_obj > GameOverPlayer_obj::__new() {
	hx::ObjectPtr< GameOverPlayer_obj > __this = new GameOverPlayer_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< GameOverPlayer_obj > GameOverPlayer_obj::__alloc(hx::Ctx *_hx_ctx) {
	GameOverPlayer_obj *__this = (GameOverPlayer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(GameOverPlayer_obj), true, "states.GameOverPlayer"));
	*(void **)__this = GameOverPlayer_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

GameOverPlayer_obj::GameOverPlayer_obj()
{
}

hx::Val GameOverPlayer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *GameOverPlayer_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *GameOverPlayer_obj_sStaticStorageInfo = 0;
#endif

static ::String GameOverPlayer_obj_sMemberFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	::String(null()) };

static void GameOverPlayer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(GameOverPlayer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void GameOverPlayer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(GameOverPlayer_obj::__mClass,"__mClass");
};

#endif

hx::Class GameOverPlayer_obj::__mClass;

void GameOverPlayer_obj::__register()
{
	hx::Object *dummy = new GameOverPlayer_obj;
	GameOverPlayer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("states.GameOverPlayer","\x33","\xec","\x29","\x35");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = GameOverPlayer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(GameOverPlayer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< GameOverPlayer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = GameOverPlayer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GameOverPlayer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GameOverPlayer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
