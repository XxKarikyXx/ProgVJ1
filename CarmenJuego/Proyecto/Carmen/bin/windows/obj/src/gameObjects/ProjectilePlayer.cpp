// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_gameObjects_ProjectilePlayer
#include <gameObjects/ProjectilePlayer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2b7a54aed31e8225_14_new,"gameObjects.ProjectilePlayer","new",0xee40e528,"gameObjects.ProjectilePlayer.new","gameObjects/ProjectilePlayer.hx",14,0xeca09be7)
HX_LOCAL_STACK_FRAME(_hx_pos_2b7a54aed31e8225_45_set_vTarget,"gameObjects.ProjectilePlayer","set_vTarget",0x4288a852,"gameObjects.ProjectilePlayer.set_vTarget","gameObjects/ProjectilePlayer.hx",45,0xeca09be7)
HX_LOCAL_STACK_FRAME(_hx_pos_2b7a54aed31e8225_50_update,"gameObjects.ProjectilePlayer","update",0x07af9e41,"gameObjects.ProjectilePlayer.update","gameObjects/ProjectilePlayer.hx",50,0xeca09be7)
HX_LOCAL_STACK_FRAME(_hx_pos_2b7a54aed31e8225_87_shoot,"gameObjects.ProjectilePlayer","shoot",0x8f1958a7,"gameObjects.ProjectilePlayer.shoot","gameObjects/ProjectilePlayer.hx",87,0xeca09be7)
HX_LOCAL_STACK_FRAME(_hx_pos_2b7a54aed31e8225_95_setPointToFollow,"gameObjects.ProjectilePlayer","setPointToFollow",0x959d9ef2,"gameObjects.ProjectilePlayer.setPointToFollow","gameObjects/ProjectilePlayer.hx",95,0xeca09be7)
HX_LOCAL_STACK_FRAME(_hx_pos_2b7a54aed31e8225_103_followTarget,"gameObjects.ProjectilePlayer","followTarget",0x84d235da,"gameObjects.ProjectilePlayer.followTarget","gameObjects/ProjectilePlayer.hx",103,0xeca09be7)
HX_LOCAL_STACK_FRAME(_hx_pos_2b7a54aed31e8225_114_followPoint,"gameObjects.ProjectilePlayer","followPoint",0x99c7d5e7,"gameObjects.ProjectilePlayer.followPoint","gameObjects/ProjectilePlayer.hx",114,0xeca09be7)
HX_LOCAL_STACK_FRAME(_hx_pos_2b7a54aed31e8225_122_setVelocityWithDeltas,"gameObjects.ProjectilePlayer","setVelocityWithDeltas",0x440327a8,"gameObjects.ProjectilePlayer.setVelocityWithDeltas","gameObjects/ProjectilePlayer.hx",122,0xeca09be7)
HX_LOCAL_STACK_FRAME(_hx_pos_2b7a54aed31e8225_134_destroy,"gameObjects.ProjectilePlayer","destroy",0x38b145c2,"gameObjects.ProjectilePlayer.destroy","gameObjects/ProjectilePlayer.hx",134,0xeca09be7)
namespace gameObjects{

void ProjectilePlayer_obj::__construct( ::flixel::FlxSprite aTarget, ::Dynamic aFollowTime, ::Dynamic __o_aVelocity){
 ::Dynamic aVelocity = __o_aVelocity.Default(600);
            	HX_GC_STACKFRAME(&_hx_pos_2b7a54aed31e8225_14_new)
HXLINE(  26)		this->vYPoint = ((Float)0);
HXLINE(  25)		this->vXPoint = ((Float)0);
HXLINE(  23)		this->vFollowPointBool = false;
HXLINE(  21)		this->vFollowTimeTotal = (int)0;
HXLINE(  20)		this->vVelocityProjectile = (int)600;
HXLINE(  18)		this->vFollowTime = ((Float)0);
HXLINE(  16)		this->vFollowBool = false;
HXLINE(  30)		super::__construct(null(),null(),null());
HXLINE(  32)		this->set_vTarget(aTarget);
HXLINE(  33)		this->makeGraphic((int)10,(int)10,null(),null(),null());
HXLINE(  34)		this->velocity->set_x((int)0);
HXLINE(  35)		this->velocity->set_y((int)0);
HXLINE(  37)		this->vVelocityProjectile = aVelocity;
HXLINE(  38)		this->vFollowTime = aFollowTime;
HXLINE(  39)		this->vFollowTimeTotal = aFollowTime;
HXLINE(  40)		 ::flixel::util::FlxTimer a =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
            	}

Dynamic ProjectilePlayer_obj::__CreateEmpty() { return new ProjectilePlayer_obj; }

void *ProjectilePlayer_obj::_hx_vtable = 0;

Dynamic ProjectilePlayer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ProjectilePlayer_obj > _hx_result = new ProjectilePlayer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool ProjectilePlayer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x15b4108c) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x15b4108c;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x2e105115;
	}
}

 ::flixel::FlxSprite ProjectilePlayer_obj::set_vTarget( ::flixel::FlxSprite atarget){
            	HX_STACKFRAME(&_hx_pos_2b7a54aed31e8225_45_set_vTarget)
HXDLIN(  45)		return (this->vTarget = atarget);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ProjectilePlayer_obj,set_vTarget,return )

void ProjectilePlayer_obj::update(Float aDt){
            	HX_STACKFRAME(&_hx_pos_2b7a54aed31e8225_50_update)
HXLINE(  51)		this->super::update(aDt);
HXLINE(  53)		if (this->vFollowBool) {
HXLINE(  55)			if (!(this->vFollowPointBool)) {
HXLINE(  57)				this->followTarget();
            			}
            			else {
HXLINE(  61)				this->followPoint();
            			}
            		}
HXLINE(  66)		bool _hx_tmp;
HXDLIN(  66)		if ((this->vFollowTime <= (int)0)) {
HXLINE(  66)			_hx_tmp = this->vFollowBool;
            		}
            		else {
HXLINE(  66)			_hx_tmp = false;
            		}
HXDLIN(  66)		if (_hx_tmp) {
HXLINE(  69)			this->vFollowBool = false;
HXLINE(  70)			this->vFollowTime = this->vFollowTimeTotal;
            		}
            		else {
HXLINE(  75)			this->vFollowTime = (this->vFollowTime - aDt);
            		}
HXLINE(  78)		bool _hx_tmp1;
HXDLIN(  78)		bool _hx_tmp2;
HXDLIN(  78)		bool _hx_tmp3;
HXDLIN(  78)		if (!((this->x < (int)0))) {
HXLINE(  78)			_hx_tmp3 = (this->x > ::flixel::FlxG_obj::width);
            		}
            		else {
HXLINE(  78)			_hx_tmp3 = true;
            		}
HXDLIN(  78)		if (!(_hx_tmp3)) {
HXLINE(  78)			_hx_tmp2 = (this->y < (int)0);
            		}
            		else {
HXLINE(  78)			_hx_tmp2 = true;
            		}
HXDLIN(  78)		if (!(_hx_tmp2)) {
HXLINE(  78)			_hx_tmp1 = (this->y > ::flixel::FlxG_obj::height);
            		}
            		else {
HXLINE(  78)			_hx_tmp1 = true;
            		}
HXDLIN(  78)		if (_hx_tmp1) {
HXLINE(  80)			this->set_visible(false);
HXLINE(  81)			this->reset((int)0,(int)0);
HXLINE(  82)			this->kill();
            		}
            	}


void ProjectilePlayer_obj::shoot(Float ax,Float ay){
            	HX_STACKFRAME(&_hx_pos_2b7a54aed31e8225_87_shoot)
HXLINE(  88)		this->reset(ax,ay);
HXLINE(  89)		this->vFollowTime = this->vFollowTimeTotal;
HXLINE(  90)		this->vFollowBool = true;
HXLINE(  91)		this->set_visible(true);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ProjectilePlayer_obj,shoot,(void))

void ProjectilePlayer_obj::setPointToFollow(Float axTo,Float ayTo){
            	HX_STACKFRAME(&_hx_pos_2b7a54aed31e8225_95_setPointToFollow)
HXLINE(  96)		this->vXPoint = axTo;
HXLINE(  97)		this->vYPoint = ayTo;
HXLINE(  98)		this->vFollowPointBool = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(ProjectilePlayer_obj,setPointToFollow,(void))

void ProjectilePlayer_obj::followTarget(){
            	HX_STACKFRAME(&_hx_pos_2b7a54aed31e8225_103_followTarget)
HXDLIN( 103)		if (hx::IsNotNull( this->vTarget )) {
HXLINE( 105)			 ::flixel::FlxSprite target = this->vTarget;
HXLINE( 106)			Float deltaX = this->vTarget->x;
HXDLIN( 106)			Float deltaX1 = (deltaX + (this->vTarget->get_width() * ((Float)0.5)));
HXDLIN( 106)			Float deltaX2 = this->x;
HXDLIN( 106)			Float deltaX3 = (deltaX1 - (deltaX2 + (this->get_width() * ((Float)0.5))));
HXLINE( 107)			Float deltaY = this->vTarget->y;
HXDLIN( 107)			Float deltaY1 = (deltaY + (this->vTarget->get_height() * ((Float)0.5)));
HXDLIN( 107)			Float deltaY2 = this->y;
HXDLIN( 107)			Float deltaY3 = (deltaY1 - (deltaY2 + (this->get_height() * ((Float)0.5))));
HXLINE( 108)			this->setVelocityWithDeltas(deltaX3,deltaY3);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ProjectilePlayer_obj,followTarget,(void))

void ProjectilePlayer_obj::followPoint(){
            	HX_STACKFRAME(&_hx_pos_2b7a54aed31e8225_114_followPoint)
HXLINE( 115)		Float deltaX = (this->vXPoint + ((Float)0.5));
HXDLIN( 115)		Float deltaX1 = (deltaX - (this->x + ((Float)0.5)));
HXLINE( 116)		Float deltaY = (this->vYPoint + ((Float)0.5));
HXDLIN( 116)		Float deltaY1 = (deltaY - (this->y + ((Float)0.5)));
HXLINE( 117)		this->setVelocityWithDeltas(deltaX1,deltaY1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ProjectilePlayer_obj,followPoint,(void))

void ProjectilePlayer_obj::setVelocityWithDeltas(Float aDeltaX,Float aDeltaY){
            	HX_STACKFRAME(&_hx_pos_2b7a54aed31e8225_122_setVelocityWithDeltas)
HXLINE( 123)		Float deltaX = aDeltaX;
HXLINE( 124)		Float deltaY = aDeltaY;
HXLINE( 125)		Float length = ::Math_obj::sqrt(((deltaX * deltaX) + (deltaY * deltaY)));
HXLINE( 126)		deltaX = ((Float)deltaX / (Float)length);
HXLINE( 127)		deltaY = ((Float)deltaY / (Float)length);
HXLINE( 128)		 ::flixel::math::FlxPoint _hx_tmp = this->velocity;
HXDLIN( 128)		_hx_tmp->set_x((deltaX * this->vVelocityProjectile));
HXLINE( 129)		 ::flixel::math::FlxPoint _hx_tmp1 = this->velocity;
HXDLIN( 129)		_hx_tmp1->set_y((deltaY * this->vVelocityProjectile));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ProjectilePlayer_obj,setVelocityWithDeltas,(void))

void ProjectilePlayer_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_2b7a54aed31e8225_134_destroy)
HXDLIN( 134)		this->super::destroy();
            	}



hx::ObjectPtr< ProjectilePlayer_obj > ProjectilePlayer_obj::__new( ::flixel::FlxSprite aTarget, ::Dynamic aFollowTime, ::Dynamic __o_aVelocity) {
	hx::ObjectPtr< ProjectilePlayer_obj > __this = new ProjectilePlayer_obj();
	__this->__construct(aTarget,aFollowTime,__o_aVelocity);
	return __this;
}

hx::ObjectPtr< ProjectilePlayer_obj > ProjectilePlayer_obj::__alloc(hx::Ctx *_hx_ctx, ::flixel::FlxSprite aTarget, ::Dynamic aFollowTime, ::Dynamic __o_aVelocity) {
	ProjectilePlayer_obj *__this = (ProjectilePlayer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ProjectilePlayer_obj), true, "gameObjects.ProjectilePlayer"));
	*(void **)__this = ProjectilePlayer_obj::_hx_vtable;
	__this->__construct(aTarget,aFollowTime,__o_aVelocity);
	return __this;
}

ProjectilePlayer_obj::ProjectilePlayer_obj()
{
}

void ProjectilePlayer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ProjectilePlayer);
	HX_MARK_MEMBER_NAME(vFollowBool,"vFollowBool");
	HX_MARK_MEMBER_NAME(vTarget,"vTarget");
	HX_MARK_MEMBER_NAME(vFollowTime,"vFollowTime");
	HX_MARK_MEMBER_NAME(vVelocityProjectile,"vVelocityProjectile");
	HX_MARK_MEMBER_NAME(vFollowTimeTotal,"vFollowTimeTotal");
	HX_MARK_MEMBER_NAME(vFollowPointBool,"vFollowPointBool");
	HX_MARK_MEMBER_NAME(vXPoint,"vXPoint");
	HX_MARK_MEMBER_NAME(vYPoint,"vYPoint");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ProjectilePlayer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(vFollowBool,"vFollowBool");
	HX_VISIT_MEMBER_NAME(vTarget,"vTarget");
	HX_VISIT_MEMBER_NAME(vFollowTime,"vFollowTime");
	HX_VISIT_MEMBER_NAME(vVelocityProjectile,"vVelocityProjectile");
	HX_VISIT_MEMBER_NAME(vFollowTimeTotal,"vFollowTimeTotal");
	HX_VISIT_MEMBER_NAME(vFollowPointBool,"vFollowPointBool");
	HX_VISIT_MEMBER_NAME(vXPoint,"vXPoint");
	HX_VISIT_MEMBER_NAME(vYPoint,"vYPoint");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val ProjectilePlayer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"shoot") ) { return hx::Val( shoot_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"vTarget") ) { return hx::Val( vTarget ); }
		if (HX_FIELD_EQ(inName,"vXPoint") ) { return hx::Val( vXPoint ); }
		if (HX_FIELD_EQ(inName,"vYPoint") ) { return hx::Val( vYPoint ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"vFollowBool") ) { return hx::Val( vFollowBool ); }
		if (HX_FIELD_EQ(inName,"vFollowTime") ) { return hx::Val( vFollowTime ); }
		if (HX_FIELD_EQ(inName,"set_vTarget") ) { return hx::Val( set_vTarget_dyn() ); }
		if (HX_FIELD_EQ(inName,"followPoint") ) { return hx::Val( followPoint_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"followTarget") ) { return hx::Val( followTarget_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"vFollowTimeTotal") ) { return hx::Val( vFollowTimeTotal ); }
		if (HX_FIELD_EQ(inName,"vFollowPointBool") ) { return hx::Val( vFollowPointBool ); }
		if (HX_FIELD_EQ(inName,"setPointToFollow") ) { return hx::Val( setPointToFollow_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"vVelocityProjectile") ) { return hx::Val( vVelocityProjectile ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"setVelocityWithDeltas") ) { return hx::Val( setVelocityWithDeltas_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val ProjectilePlayer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"vTarget") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_vTarget(inValue.Cast<  ::flixel::FlxSprite >()) );vTarget=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vXPoint") ) { vXPoint=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vYPoint") ) { vYPoint=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"vFollowBool") ) { vFollowBool=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vFollowTime") ) { vFollowTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"vFollowTimeTotal") ) { vFollowTimeTotal=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vFollowPointBool") ) { vFollowPointBool=inValue.Cast< bool >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"vVelocityProjectile") ) { vVelocityProjectile=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ProjectilePlayer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("vFollowBool","\x51","\xc2","\x25","\x30"));
	outFields->push(HX_HCSTRING("vTarget","\x67","\x24","\x66","\xe6"));
	outFields->push(HX_HCSTRING("vFollowTime","\x34","\x0a","\x07","\x3c"));
	outFields->push(HX_HCSTRING("vVelocityProjectile","\x7c","\xac","\x4c","\x21"));
	outFields->push(HX_HCSTRING("vFollowTimeTotal","\xf0","\x3c","\x23","\xce"));
	outFields->push(HX_HCSTRING("vFollowPointBool","\x13","\xe1","\x7c","\x1b"));
	outFields->push(HX_HCSTRING("vXPoint","\xce","\xa1","\x09","\xb4"));
	outFields->push(HX_HCSTRING("vYPoint","\x2d","\xfe","\x64","\x1a"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo ProjectilePlayer_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(ProjectilePlayer_obj,vFollowBool),HX_HCSTRING("vFollowBool","\x51","\xc2","\x25","\x30")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(ProjectilePlayer_obj,vTarget),HX_HCSTRING("vTarget","\x67","\x24","\x66","\xe6")},
	{hx::fsFloat,(int)offsetof(ProjectilePlayer_obj,vFollowTime),HX_HCSTRING("vFollowTime","\x34","\x0a","\x07","\x3c")},
	{hx::fsInt,(int)offsetof(ProjectilePlayer_obj,vVelocityProjectile),HX_HCSTRING("vVelocityProjectile","\x7c","\xac","\x4c","\x21")},
	{hx::fsInt,(int)offsetof(ProjectilePlayer_obj,vFollowTimeTotal),HX_HCSTRING("vFollowTimeTotal","\xf0","\x3c","\x23","\xce")},
	{hx::fsBool,(int)offsetof(ProjectilePlayer_obj,vFollowPointBool),HX_HCSTRING("vFollowPointBool","\x13","\xe1","\x7c","\x1b")},
	{hx::fsFloat,(int)offsetof(ProjectilePlayer_obj,vXPoint),HX_HCSTRING("vXPoint","\xce","\xa1","\x09","\xb4")},
	{hx::fsFloat,(int)offsetof(ProjectilePlayer_obj,vYPoint),HX_HCSTRING("vYPoint","\x2d","\xfe","\x64","\x1a")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *ProjectilePlayer_obj_sStaticStorageInfo = 0;
#endif

static ::String ProjectilePlayer_obj_sMemberFields[] = {
	HX_HCSTRING("vFollowBool","\x51","\xc2","\x25","\x30"),
	HX_HCSTRING("vTarget","\x67","\x24","\x66","\xe6"),
	HX_HCSTRING("vFollowTime","\x34","\x0a","\x07","\x3c"),
	HX_HCSTRING("vVelocityProjectile","\x7c","\xac","\x4c","\x21"),
	HX_HCSTRING("vFollowTimeTotal","\xf0","\x3c","\x23","\xce"),
	HX_HCSTRING("vFollowPointBool","\x13","\xe1","\x7c","\x1b"),
	HX_HCSTRING("vXPoint","\xce","\xa1","\x09","\xb4"),
	HX_HCSTRING("vYPoint","\x2d","\xfe","\x64","\x1a"),
	HX_HCSTRING("set_vTarget","\x8a","\x8b","\xcd","\x76"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("shoot","\xdf","\x81","\x27","\x7c"),
	HX_HCSTRING("setPointToFollow","\xba","\x10","\xbe","\xd1"),
	HX_HCSTRING("followTarget","\xa2","\x23","\xd4","\x0c"),
	HX_HCSTRING("followPoint","\x1f","\xb9","\x0c","\xce"),
	HX_HCSTRING("setVelocityWithDeltas","\xe0","\x40","\x09","\x5f"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	::String(null()) };

static void ProjectilePlayer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ProjectilePlayer_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ProjectilePlayer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ProjectilePlayer_obj::__mClass,"__mClass");
};

#endif

hx::Class ProjectilePlayer_obj::__mClass;

void ProjectilePlayer_obj::__register()
{
	hx::Object *dummy = new ProjectilePlayer_obj;
	ProjectilePlayer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("gameObjects.ProjectilePlayer","\x36","\x71","\xd5","\x61");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = ProjectilePlayer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ProjectilePlayer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ProjectilePlayer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ProjectilePlayer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ProjectilePlayer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ProjectilePlayer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace gameObjects
