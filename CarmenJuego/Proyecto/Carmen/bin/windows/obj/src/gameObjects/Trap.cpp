// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_gameObjects_Trap
#include <gameObjects/Trap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c06bdfb09b9ee41e_9_new,"gameObjects.Trap","new",0x0412fc6b,"gameObjects.Trap.new","gameObjects/Trap.hx",9,0x42662b84)
HX_LOCAL_STACK_FRAME(_hx_pos_c06bdfb09b9ee41e_23_update,"gameObjects.Trap","update",0x414f32de,"gameObjects.Trap.update","gameObjects/Trap.hx",23,0x42662b84)
HX_LOCAL_STACK_FRAME(_hx_pos_c06bdfb09b9ee41e_28_destroy,"gameObjects.Trap","destroy",0x6ab3ba85,"gameObjects.Trap.destroy","gameObjects/Trap.hx",28,0x42662b84)
namespace gameObjects{

void Trap_obj::__construct( ::Dynamic __o_aX, ::Dynamic __o_aY){
 ::Dynamic aX = __o_aX.Default(0);
 ::Dynamic aY = __o_aY.Default(0);
            	HX_STACKFRAME(&_hx_pos_c06bdfb09b9ee41e_9_new)
HXLINE(  11)		this->vCanCollide = false;
HXLINE(  15)		super::__construct(aX,aY,null());
HXLINE(  16)		this->loadGraphic(HX_("assets/img/ohno.jpg",25,ff,24,fe),true,(int)64,(int)32,null(),null());
HXLINE(  17)		this->set_width((int)64);
HXLINE(  18)		this->set_height((int)32);
            	}

Dynamic Trap_obj::__CreateEmpty() { return new Trap_obj; }

void *Trap_obj::_hx_vtable = 0;

Dynamic Trap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Trap_obj > _hx_result = new Trap_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Trap_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x4c2f614f;
	}
}

void Trap_obj::update(Float aDt){
            	HX_STACKFRAME(&_hx_pos_c06bdfb09b9ee41e_23_update)
HXDLIN(  23)		this->super::update(aDt);
            	}


void Trap_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_c06bdfb09b9ee41e_28_destroy)
HXDLIN(  28)		this->super::destroy();
            	}



hx::ObjectPtr< Trap_obj > Trap_obj::__new( ::Dynamic __o_aX, ::Dynamic __o_aY) {
	hx::ObjectPtr< Trap_obj > __this = new Trap_obj();
	__this->__construct(__o_aX,__o_aY);
	return __this;
}

hx::ObjectPtr< Trap_obj > Trap_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic __o_aX, ::Dynamic __o_aY) {
	Trap_obj *__this = (Trap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Trap_obj), true, "gameObjects.Trap"));
	*(void **)__this = Trap_obj::_hx_vtable;
	__this->__construct(__o_aX,__o_aY);
	return __this;
}

Trap_obj::Trap_obj()
{
}

hx::Val Trap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"vCanCollide") ) { return hx::Val( vCanCollide ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Trap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"vCanCollide") ) { vCanCollide=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Trap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("vCanCollide","\x64","\x79","\xdd","\xf5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Trap_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Trap_obj,vCanCollide),HX_HCSTRING("vCanCollide","\x64","\x79","\xdd","\xf5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Trap_obj_sStaticStorageInfo = 0;
#endif

static ::String Trap_obj_sMemberFields[] = {
	HX_HCSTRING("vCanCollide","\x64","\x79","\xdd","\xf5"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	::String(null()) };

static void Trap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Trap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Trap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Trap_obj::__mClass,"__mClass");
};

#endif

hx::Class Trap_obj::__mClass;

void Trap_obj::__register()
{
	hx::Object *dummy = new Trap_obj;
	Trap_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("gameObjects.Trap","\xf9","\xea","\x53","\x1d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Trap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Trap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Trap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Trap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Trap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Trap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace gameObjects
