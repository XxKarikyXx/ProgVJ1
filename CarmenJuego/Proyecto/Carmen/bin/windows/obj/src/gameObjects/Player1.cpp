// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_gameObjects_Player1
#include <gameObjects/Player1.h>
#endif
#ifndef INCLUDED_gameObjects_ProjectilePlayer
#include <gameObjects/ProjectilePlayer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_19106c3d6444641f_17_new,"gameObjects.Player1","new",0x1100e716,"gameObjects.Player1.new","gameObjects/Player1.hx",17,0x990d785b)
static const int _hx_array_data_02d66424_1[] = {
	(int)20,(int)21,(int)22,(int)23,(int)24,(int)25,(int)26,(int)27,(int)28,
};
static const int _hx_array_data_02d66424_2[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,(int)10,(int)11,(int)12,(int)13,(int)14,(int)15,(int)16,(int)17,(int)18,
};
static const int _hx_array_data_02d66424_3[] = {
	(int)1,(int)2,(int)3,
};
static const int _hx_array_data_02d66424_4[] = {
	(int)1,(int)2,(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_19106c3d6444641f_61_intanceProjectiles,"gameObjects.Player1","intanceProjectiles",0xa8d11fd6,"gameObjects.Player1.intanceProjectiles","gameObjects/Player1.hx",61,0x990d785b)
HX_LOCAL_STACK_FRAME(_hx_pos_19106c3d6444641f_68_setCoins,"gameObjects.Player1","setCoins",0x53a5684a,"gameObjects.Player1.setCoins","gameObjects/Player1.hx",68,0x990d785b)
HX_LOCAL_STACK_FRAME(_hx_pos_19106c3d6444641f_73_set_vProjectiles,"gameObjects.Player1","set_vProjectiles",0x56700f1b,"gameObjects.Player1.set_vProjectiles","gameObjects/Player1.hx",73,0x990d785b)
HX_LOCAL_STACK_FRAME(_hx_pos_19106c3d6444641f_77_create,"gameObjects.Player1","create",0x5880e606,"gameObjects.Player1.create","gameObjects/Player1.hx",77,0x990d785b)
HX_LOCAL_STACK_FRAME(_hx_pos_19106c3d6444641f_82_update,"gameObjects.Player1","update",0x63770513,"gameObjects.Player1.update","gameObjects/Player1.hx",82,0x990d785b)
HX_LOCAL_STACK_FRAME(_hx_pos_19106c3d6444641f_166_normalPlayerMovement,"gameObjects.Player1","normalPlayerMovement",0x38bbcec1,"gameObjects.Player1.normalPlayerMovement","gameObjects/Player1.hx",166,0x990d785b)
HX_LOCAL_STACK_FRAME(_hx_pos_19106c3d6444641f_211_playerStunned,"gameObjects.Player1","playerStunned",0x74330c28,"gameObjects.Player1.playerStunned","gameObjects/Player1.hx",211,0x990d785b)
HX_LOCAL_STACK_FRAME(_hx_pos_19106c3d6444641f_224_set_vCoinsCount,"gameObjects.Player1","set_vCoinsCount",0x1bb0e41c,"gameObjects.Player1.set_vCoinsCount","gameObjects/Player1.hx",224,0x990d785b)
HX_LOCAL_STACK_FRAME(_hx_pos_19106c3d6444641f_229_get_vCoinsCount,"gameObjects.Player1","get_vCoinsCount",0x1fe56710,"gameObjects.Player1.get_vCoinsCount","gameObjects/Player1.hx",229,0x990d785b)
HX_LOCAL_STACK_FRAME(_hx_pos_19106c3d6444641f_234_destroy,"gameObjects.Player1","destroy",0x2b63d6b0,"gameObjects.Player1.destroy","gameObjects/Player1.hx",234,0x990d785b)
HX_LOCAL_STACK_FRAME(_hx_pos_19106c3d6444641f_30_boot,"gameObjects.Player1","boot",0xc7e24cbc,"gameObjects.Player1.boot","gameObjects/Player1.hx",30,0x990d785b)
HX_LOCAL_STACK_FRAME(_hx_pos_19106c3d6444641f_31_boot,"gameObjects.Player1","boot",0xc7e24cbc,"gameObjects.Player1.boot","gameObjects/Player1.hx",31,0x990d785b)
HX_LOCAL_STACK_FRAME(_hx_pos_19106c3d6444641f_32_boot,"gameObjects.Player1","boot",0xc7e24cbc,"gameObjects.Player1.boot","gameObjects/Player1.hx",32,0x990d785b)
namespace gameObjects{

void Player1_obj::__construct(Float aX,Float aY){
            	HX_STACKFRAME(&_hx_pos_19106c3d6444641f_17_new)
HXLINE(  26)		this->vStateDuration = ((Float)-1);
HXLINE(  25)		this->vState = HX_("Normal",47,e6,fd,64);
HXLINE(  22)		this->vProjectilesCount = (int)-1;
HXLINE(  20)		this->vCoinsCount = (int)0;
HXLINE(  19)		this->vJumpOnAirCount = (int)0;
HXLINE(  36)		super::__construct(aX,aY,null());
HXLINE(  38)		this->vJumpSound = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/MarioJump.wav",64,bc,18,e1),null(),null(),null(),null(),null(),null(),null());
HXLINE(  40)		this->loadGraphic(HX_("assets/img/Sheets/ariosheet.png",00,db,5b,58),true,(int)128,(int)128,null(),null());
HXLINE(  41)		this->animation->add(HX_("run",4b,e7,56,00),::Array_obj< int >::fromData( _hx_array_data_02d66424_1,9),null(),null(),null(),null());
HXLINE(  42)		this->animation->add(HX_("idle",14,a7,b3,45),::Array_obj< int >::fromData( _hx_array_data_02d66424_2,19),null(),null(),null(),null());
HXLINE(  43)		this->animation->add(HX_("jump",ee,c4,69,46),::Array_obj< int >::fromData( _hx_array_data_02d66424_3,3),null(),null(),null(),null());
HXLINE(  44)		this->animation->add(HX_("fall",7b,bc,b5,43),::Array_obj< int >::fromData( _hx_array_data_02d66424_4,3),null(),null(),null(),null());
HXLINE(  46)		this->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(  48)		this->offset->set_y((int)10);
HXLINE(  49)		this->offset->set_x((int)37);
HXLINE(  50)		this->set_width((int)55);
HXLINE(  51)		this->set_height((int)120);
HXLINE(  52)		this->maxVelocity->set_x((int)800);
HXLINE(  56)		this->acceleration->set_y((int)3500);
            	}

Dynamic Player1_obj::__CreateEmpty() { return new Player1_obj; }

void *Player1_obj::_hx_vtable = 0;

Dynamic Player1_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player1_obj > _hx_result = new Player1_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Player1_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x54c91c56;
	}
}

void Player1_obj::intanceProjectiles(){
            	HX_STACKFRAME(&_hx_pos_19106c3d6444641f_61_intanceProjectiles)
HXDLIN(  61)		this->vProjectilesCount = (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player1_obj,intanceProjectiles,(void))

void Player1_obj::setCoins( ::flixel::group::FlxTypedGroup aCoins){
            	HX_STACKFRAME(&_hx_pos_19106c3d6444641f_68_setCoins)
HXDLIN(  68)		this->vCoins = aCoins;
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player1_obj,setCoins,(void))

 ::flixel::group::FlxTypedGroup Player1_obj::set_vProjectiles( ::flixel::group::FlxTypedGroup aProjectiles){
            	HX_STACKFRAME(&_hx_pos_19106c3d6444641f_73_set_vProjectiles)
HXDLIN(  73)		return (this->vProjectiles = aProjectiles);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player1_obj,set_vProjectiles,return )

void Player1_obj::create(){
            	HX_STACKFRAME(&_hx_pos_19106c3d6444641f_77_create)
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player1_obj,create,(void))

void Player1_obj::update(Float aDt){
            	HX_STACKFRAME(&_hx_pos_19106c3d6444641f_82_update)
HXLINE(  83)		this->acceleration->set_x((int)0);
HXLINE(  84)		this->velocity->set_x((int)0);
HXLINE(  86)		{
HXLINE(  86)			::String _g = this->vState;
HXDLIN(  86)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("Normal",47,e6,fd,64)) ){
HXLINE(  89)				this->normalPlayerMovement(aDt);
HXDLIN(  89)				goto _hx_goto_9;
            			}
            			if (  (_hx_switch_0==HX_("Stunned",33,83,c6,83)) ){
HXLINE(  91)				this->playerStunned(aDt);
HXDLIN(  91)				goto _hx_goto_9;
            			}
            			_hx_goto_9:;
            		}
HXLINE(  94)		if ((((int)this->touching & (int)(int)4096) > (int)0)) {
HXLINE(  96)			this->vJumpOnAirCount = (int)0;
            		}
HXLINE( 100)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 100)		if (_this->keyManager->checkStatus((int)32,_this->status)) {
HXLINE( 102)			bool _hx_tmp;
HXDLIN( 102)			bool _hx_tmp1;
HXDLIN( 102)			if (hx::IsNotNull( this->vProjectiles )) {
HXLINE( 102)				_hx_tmp1 = (this->vProjectilesCount < this->vProjectiles->length);
            			}
            			else {
HXLINE( 102)				_hx_tmp1 = false;
            			}
HXDLIN( 102)			if (_hx_tmp1) {
HXLINE( 102)				_hx_tmp = (this->vProjectilesCount != (int)-1);
            			}
            			else {
HXLINE( 102)				_hx_tmp = false;
            			}
HXDLIN( 102)			if (_hx_tmp) {
HXLINE( 104)				this->vProjectilesCount = (this->vProjectilesCount + (int)1);
HXLINE( 105)				::Array< ::Dynamic> pro = this->vProjectiles->members;
HXDLIN( 105)				 ::gameObjects::ProjectilePlayer pro1 = hx::TCast<  ::gameObjects::ProjectilePlayer >::cast(pro->__get((this->vProjectilesCount - (int)1)).StaticCast<  ::flixel::FlxBasic >());
HXLINE( 106)				Float _hx_tmp2 = this->x;
HXDLIN( 106)				Float _hx_tmp3 = (_hx_tmp2 + ((Float)this->get_width() / (Float)(int)2));
HXDLIN( 106)				Float _hx_tmp4 = this->y;
HXDLIN( 106)				pro1->shoot(_hx_tmp3,(_hx_tmp4 + ((Float)this->get_height() / (Float)(int)2)));
HXLINE( 107)				pro1->set_visible(true);
            			}
            		}
HXLINE( 112)		bool _hx_tmp5;
HXDLIN( 112)		if ((this->velocity->x == (int)0)) {
HXLINE( 112)			_hx_tmp5 = (this->velocity->y == (int)0);
            		}
            		else {
HXLINE( 112)			_hx_tmp5 = false;
            		}
HXDLIN( 112)		if (_hx_tmp5) {
HXLINE( 114)			this->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
            		}
            		else {
HXLINE( 118)			if ((this->velocity->y != (int)0)) {
HXLINE( 120)				if ((this->velocity->y > (int)0)) {
HXLINE( 122)					this->animation->play(HX_("fall",7b,bc,b5,43),null(),null(),null());
            				}
            				else {
HXLINE( 128)					this->animation->play(HX_("jump",ee,c4,69,46),null(),null(),null());
            				}
            			}
            			else {
HXLINE( 133)				if ((this->velocity->x != (int)0)) {
HXLINE( 135)					this->animation->play(HX_("run",4b,e7,56,00),null(),null(),null());
HXLINE( 136)					if ((this->acceleration->x == (int)0)) {
HXLINE( 139)						this->animation->play(HX_("fall",7b,bc,b5,43),null(),null(),null());
            					}
HXLINE( 141)					if (((this->velocity->x * this->acceleration->x) < (int)0)) {
HXLINE( 143)						this->animation->play(HX_("fall",7b,bc,b5,43),null(),null(),null());
            					}
            				}
            			}
            		}
HXLINE( 152)		if ((this->acceleration->x > (int)0)) {
HXLINE( 154)			this->set_flipX(false);
            		}
HXLINE( 157)		if ((this->acceleration->x < (int)0)) {
HXLINE( 159)			this->set_flipX(true);
            		}
HXLINE( 161)		this->super::update(aDt);
            	}


void Player1_obj::normalPlayerMovement(Float aDt){
            	HX_STACKFRAME(&_hx_pos_19106c3d6444641f_166_normalPlayerMovement)
HXLINE( 168)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 168)		if (_this->keyManager->checkStatus((int)65,_this->status)) {
HXLINE( 170)			this->acceleration->set_x((int)-1500);
HXLINE( 171)			this->velocity->set_x((int)-700);
            		}
HXLINE( 175)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 175)		if (_this1->keyManager->checkStatus((int)68,_this1->status)) {
HXLINE( 177)			this->acceleration->set_x((int)1500);
HXLINE( 178)			this->velocity->set_x((int)700);
            		}
HXLINE( 182)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 182)		if (_this2->keyManager->checkStatus((int)87,_this2->status)) {
HXLINE( 184)			if ((((int)this->touching & (int)(int)4096) > (int)0)) {
HXLINE( 186)				this->velocity->set_y((int)-800);
HXLINE( 187)				this->vJumpSound->play(true,(int)500,null());
            			}
            			else {
HXLINE( 191)				if ((this->vJumpOnAirCount == (int)0)) {
HXLINE( 193)					this->vJumpSound->play(true,(int)500,null());
HXLINE( 194)					this->vJumpOnAirCount = (this->vJumpOnAirCount + (int)1);
HXLINE( 195)					this->velocity->set_y((int)-800);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player1_obj,normalPlayerMovement,(void))

void Player1_obj::playerStunned(Float aDt){
            	HX_STACKFRAME(&_hx_pos_19106c3d6444641f_211_playerStunned)
HXDLIN( 211)		if ((this->vStateDuration <= (int)0)) {
HXLINE( 213)			this->vState = HX_("Normal",47,e6,fd,64);
HXLINE( 214)			this->vStateDuration = (int)-1;
            		}
            		else {
HXLINE( 218)			 ::gameObjects::Player1 _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 218)			_hx_tmp->vStateDuration = (_hx_tmp->vStateDuration - aDt);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player1_obj,playerStunned,(void))

int Player1_obj::set_vCoinsCount(int value){
            	HX_STACKFRAME(&_hx_pos_19106c3d6444641f_224_set_vCoinsCount)
HXDLIN( 224)		return (this->vCoinsCount = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Player1_obj,set_vCoinsCount,return )

int Player1_obj::get_vCoinsCount(){
            	HX_STACKFRAME(&_hx_pos_19106c3d6444641f_229_get_vCoinsCount)
HXDLIN( 229)		return this->vCoinsCount;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player1_obj,get_vCoinsCount,return )

void Player1_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_19106c3d6444641f_234_destroy)
HXDLIN( 234)		this->super::destroy();
            	}


int Player1_obj::cAccelerationx;

int Player1_obj::cVelocityx;

int Player1_obj::cVelocityy;


hx::ObjectPtr< Player1_obj > Player1_obj::__new(Float aX,Float aY) {
	hx::ObjectPtr< Player1_obj > __this = new Player1_obj();
	__this->__construct(aX,aY);
	return __this;
}

hx::ObjectPtr< Player1_obj > Player1_obj::__alloc(hx::Ctx *_hx_ctx,Float aX,Float aY) {
	Player1_obj *__this = (Player1_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Player1_obj), true, "gameObjects.Player1"));
	*(void **)__this = Player1_obj::_hx_vtable;
	__this->__construct(aX,aY);
	return __this;
}

Player1_obj::Player1_obj()
{
}

void Player1_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player1);
	HX_MARK_MEMBER_NAME(vJumpOnAirCount,"vJumpOnAirCount");
	HX_MARK_MEMBER_NAME(vCoinsCount,"vCoinsCount");
	HX_MARK_MEMBER_NAME(vProjectiles,"vProjectiles");
	HX_MARK_MEMBER_NAME(vProjectilesCount,"vProjectilesCount");
	HX_MARK_MEMBER_NAME(vCoins,"vCoins");
	HX_MARK_MEMBER_NAME(vState,"vState");
	HX_MARK_MEMBER_NAME(vStateDuration,"vStateDuration");
	HX_MARK_MEMBER_NAME(vJumpSound,"vJumpSound");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Player1_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(vJumpOnAirCount,"vJumpOnAirCount");
	HX_VISIT_MEMBER_NAME(vCoinsCount,"vCoinsCount");
	HX_VISIT_MEMBER_NAME(vProjectiles,"vProjectiles");
	HX_VISIT_MEMBER_NAME(vProjectilesCount,"vProjectilesCount");
	HX_VISIT_MEMBER_NAME(vCoins,"vCoins");
	HX_VISIT_MEMBER_NAME(vState,"vState");
	HX_VISIT_MEMBER_NAME(vStateDuration,"vStateDuration");
	HX_VISIT_MEMBER_NAME(vJumpSound,"vJumpSound");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Player1_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"vCoins") ) { return hx::Val( vCoins ); }
		if (HX_FIELD_EQ(inName,"vState") ) { return hx::Val( vState ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setCoins") ) { return hx::Val( setCoins_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"vJumpSound") ) { return hx::Val( vJumpSound ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"vCoinsCount") ) { return hx::Val( inCallProp == hx::paccAlways ? get_vCoinsCount() : vCoinsCount ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"vProjectiles") ) { return hx::Val( vProjectiles ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"playerStunned") ) { return hx::Val( playerStunned_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"vStateDuration") ) { return hx::Val( vStateDuration ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"vJumpOnAirCount") ) { return hx::Val( vJumpOnAirCount ); }
		if (HX_FIELD_EQ(inName,"set_vCoinsCount") ) { return hx::Val( set_vCoinsCount_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_vCoinsCount") ) { return hx::Val( get_vCoinsCount_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"set_vProjectiles") ) { return hx::Val( set_vProjectiles_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"vProjectilesCount") ) { return hx::Val( vProjectilesCount ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"intanceProjectiles") ) { return hx::Val( intanceProjectiles_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"normalPlayerMovement") ) { return hx::Val( normalPlayerMovement_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Player1_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"vCoins") ) { vCoins=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vState") ) { vState=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"vJumpSound") ) { vJumpSound=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"vCoinsCount") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_vCoinsCount(inValue.Cast< int >()) );vCoinsCount=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"vProjectiles") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_vProjectiles(inValue.Cast<  ::flixel::group::FlxTypedGroup >()) );vProjectiles=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"vStateDuration") ) { vStateDuration=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"vJumpOnAirCount") ) { vJumpOnAirCount=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"vProjectilesCount") ) { vProjectilesCount=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player1_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("vJumpOnAirCount","\xc8","\x53","\xf2","\x33"));
	outFields->push(HX_HCSTRING("vCoinsCount","\xc3","\x5f","\x34","\x5d"));
	outFields->push(HX_HCSTRING("vProjectiles","\x94","\xc5","\xf8","\x67"));
	outFields->push(HX_HCSTRING("vProjectilesCount","\x9b","\x36","\x7f","\x0d"));
	outFields->push(HX_HCSTRING("vCoins","\x6c","\x2d","\xa4","\x0b"));
	outFields->push(HX_HCSTRING("vState","\xbb","\x79","\x55","\x45"));
	outFields->push(HX_HCSTRING("vStateDuration","\x2f","\xf8","\x8d","\x41"));
	outFields->push(HX_HCSTRING("vJumpSound","\xab","\xb9","\xbf","\x50"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Player1_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Player1_obj,vJumpOnAirCount),HX_HCSTRING("vJumpOnAirCount","\xc8","\x53","\xf2","\x33")},
	{hx::fsInt,(int)offsetof(Player1_obj,vCoinsCount),HX_HCSTRING("vCoinsCount","\xc3","\x5f","\x34","\x5d")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(Player1_obj,vProjectiles),HX_HCSTRING("vProjectiles","\x94","\xc5","\xf8","\x67")},
	{hx::fsInt,(int)offsetof(Player1_obj,vProjectilesCount),HX_HCSTRING("vProjectilesCount","\x9b","\x36","\x7f","\x0d")},
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(Player1_obj,vCoins),HX_HCSTRING("vCoins","\x6c","\x2d","\xa4","\x0b")},
	{hx::fsString,(int)offsetof(Player1_obj,vState),HX_HCSTRING("vState","\xbb","\x79","\x55","\x45")},
	{hx::fsFloat,(int)offsetof(Player1_obj,vStateDuration),HX_HCSTRING("vStateDuration","\x2f","\xf8","\x8d","\x41")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(Player1_obj,vJumpSound),HX_HCSTRING("vJumpSound","\xab","\xb9","\xbf","\x50")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Player1_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Player1_obj::cAccelerationx,HX_HCSTRING("cAccelerationx","\xd5","\xc5","\x76","\x0b")},
	{hx::fsInt,(void *) &Player1_obj::cVelocityx,HX_HCSTRING("cVelocityx","\xd8","\x12","\xe3","\xfd")},
	{hx::fsInt,(void *) &Player1_obj::cVelocityy,HX_HCSTRING("cVelocityy","\xd9","\x12","\xe3","\xfd")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Player1_obj_sMemberFields[] = {
	HX_HCSTRING("vJumpOnAirCount","\xc8","\x53","\xf2","\x33"),
	HX_HCSTRING("vCoinsCount","\xc3","\x5f","\x34","\x5d"),
	HX_HCSTRING("vProjectiles","\x94","\xc5","\xf8","\x67"),
	HX_HCSTRING("vProjectilesCount","\x9b","\x36","\x7f","\x0d"),
	HX_HCSTRING("vCoins","\x6c","\x2d","\xa4","\x0b"),
	HX_HCSTRING("vState","\xbb","\x79","\x55","\x45"),
	HX_HCSTRING("vStateDuration","\x2f","\xf8","\x8d","\x41"),
	HX_HCSTRING("vJumpSound","\xab","\xb9","\xbf","\x50"),
	HX_HCSTRING("intanceProjectiles","\xcc","\x39","\x18","\x2f"),
	HX_HCSTRING("setCoins","\xc0","\x92","\x8e","\x58"),
	HX_HCSTRING("set_vProjectiles","\x91","\x9f","\xd9","\xc2"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("normalPlayerMovement","\x37","\xd2","\x75","\x32"),
	HX_HCSTRING("playerStunned","\xf2","\x35","\xee","\x2d"),
	HX_HCSTRING("set_vCoinsCount","\x66","\x94","\xe1","\x19"),
	HX_HCSTRING("get_vCoinsCount","\x5a","\x17","\x16","\x1e"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	::String(null()) };

static void Player1_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player1_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Player1_obj::cAccelerationx,"cAccelerationx");
	HX_MARK_MEMBER_NAME(Player1_obj::cVelocityx,"cVelocityx");
	HX_MARK_MEMBER_NAME(Player1_obj::cVelocityy,"cVelocityy");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player1_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player1_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Player1_obj::cAccelerationx,"cAccelerationx");
	HX_VISIT_MEMBER_NAME(Player1_obj::cVelocityx,"cVelocityx");
	HX_VISIT_MEMBER_NAME(Player1_obj::cVelocityy,"cVelocityy");
};

#endif

hx::Class Player1_obj::__mClass;

static ::String Player1_obj_sStaticFields[] = {
	HX_HCSTRING("cAccelerationx","\xd5","\xc5","\x76","\x0b"),
	HX_HCSTRING("cVelocityx","\xd8","\x12","\xe3","\xfd"),
	HX_HCSTRING("cVelocityy","\xd9","\x12","\xe3","\xfd"),
	::String(null())
};

void Player1_obj::__register()
{
	hx::Object *dummy = new Player1_obj;
	Player1_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("gameObjects.Player1","\x24","\x64","\xd6","\x02");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Player1_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Player1_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player1_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player1_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player1_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player1_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player1_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Player1_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_19106c3d6444641f_30_boot)
HXDLIN(  30)		cAccelerationx = (int)1500;
            	}
{
            	HX_STACKFRAME(&_hx_pos_19106c3d6444641f_31_boot)
HXDLIN(  31)		cVelocityx = (int)700;
            	}
{
            	HX_STACKFRAME(&_hx_pos_19106c3d6444641f_32_boot)
HXDLIN(  32)		cVelocityy = (int)800;
            	}
}

} // end namespace gameObjects
