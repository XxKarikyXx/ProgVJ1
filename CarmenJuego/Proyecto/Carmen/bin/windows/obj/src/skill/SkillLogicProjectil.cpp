// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_GlobalGameData
#include <GlobalGameData.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_gameObjects_God
#include <gameObjects/God.h>
#endif
#ifndef INCLUDED_gameObjects_ProjectilePlayer
#include <gameObjects/ProjectilePlayer.h>
#endif
#ifndef INCLUDED_skill_FlxButtonAnimationSkill
#include <skill/FlxButtonAnimationSkill.h>
#endif
#ifndef INCLUDED_skill_ISkillLogic
#include <skill/ISkillLogic.h>
#endif
#ifndef INCLUDED_skill_SkillLogicProjectil
#include <skill/SkillLogicProjectil.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bb7d026a6de5e9fe_21_new,"skill.SkillLogicProjectil","new",0x4f9679a4,"skill.SkillLogicProjectil.new","skill/SkillLogicProjectil.hx",21,0x43b64f0d)
HX_LOCAL_STACK_FRAME(_hx_pos_bb7d026a6de5e9fe_26_preparationSkill,"skill.SkillLogicProjectil","preparationSkill",0x09861976,"skill.SkillLogicProjectil.preparationSkill","skill/SkillLogicProjectil.hx",26,0x43b64f0d)
HX_LOCAL_STACK_FRAME(_hx_pos_bb7d026a6de5e9fe_34_skillExecution,"skill.SkillLogicProjectil","skillExecution",0x8d2bd103,"skill.SkillLogicProjectil.skillExecution","skill/SkillLogicProjectil.hx",34,0x43b64f0d)
HX_LOCAL_STACK_FRAME(_hx_pos_bb7d026a6de5e9fe_44_skillReset,"skill.SkillLogicProjectil","skillReset",0xb1551dba,"skill.SkillLogicProjectil.skillReset","skill/SkillLogicProjectil.hx",44,0x43b64f0d)
HX_LOCAL_STACK_FRAME(_hx_pos_bb7d026a6de5e9fe_51_skillUpdateValidation,"skill.SkillLogicProjectil","skillUpdateValidation",0xb6e08997,"skill.SkillLogicProjectil.skillUpdateValidation","skill/SkillLogicProjectil.hx",51,0x43b64f0d)
namespace skill{

void SkillLogicProjectil_obj::__construct(::String aTextDescription){
            	HX_STACKFRAME(&_hx_pos_bb7d026a6de5e9fe_21_new)
HXDLIN(  21)		this->vTextDescription = aTextDescription;
            	}

Dynamic SkillLogicProjectil_obj::__CreateEmpty() { return new SkillLogicProjectil_obj; }

void *SkillLogicProjectil_obj::_hx_vtable = 0;

Dynamic SkillLogicProjectil_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SkillLogicProjectil_obj > _hx_result = new SkillLogicProjectil_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SkillLogicProjectil_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x06a44f1e;
}

static ::skill::ISkillLogic_obj _hx_skill_SkillLogicProjectil__hx_skill_ISkillLogic= {
	( void (hx::Object::*)())&::skill::SkillLogicProjectil_obj::preparationSkill,
	( bool (hx::Object::*)())&::skill::SkillLogicProjectil_obj::skillExecution,
	( void (hx::Object::*)())&::skill::SkillLogicProjectil_obj::skillReset,
	( void (hx::Object::*)())&::skill::SkillLogicProjectil_obj::skillUpdateValidation,
};

void *SkillLogicProjectil_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xddb348c5: return &_hx_skill_SkillLogicProjectil__hx_skill_ISkillLogic;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void SkillLogicProjectil_obj::preparationSkill(){
            	HX_STACKFRAME(&_hx_pos_bb7d026a6de5e9fe_26_preparationSkill)
HXDLIN(  26)		int _g = (int)0;
HXDLIN(  26)		while((_g < (int)1)){
HXDLIN(  26)			_g = (_g + (int)1);
HXDLIN(  26)			int i = (_g - (int)1);
HXLINE(  28)			Dynamic( this->vProjectiles->members->__get(i)).StaticCast<  ::flixel::FlxBasic >()->revive();
HXLINE(  29)			Dynamic( this->vProjectiles->members->__get(i)).StaticCast<  ::flixel::FlxBasic >()->set_visible(false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SkillLogicProjectil_obj,preparationSkill,(void))

bool SkillLogicProjectil_obj::skillExecution(){
            	HX_STACKFRAME(&_hx_pos_bb7d026a6de5e9fe_34_skillExecution)
HXLINE(  35)		this->vSkillButton->setActivation();
HXLINE(  36)		 ::gameObjects::ProjectilePlayer proj = hx::TCast<  ::gameObjects::ProjectilePlayer >::cast(Dynamic( this->vProjectiles->members->__get((int)0)).StaticCast<  ::flixel::FlxBasic >());
HXLINE(  37)		proj->setPointToFollow(::flixel::FlxG_obj::mouse->x,::flixel::FlxG_obj::mouse->y);
HXLINE(  38)		Float _hx_tmp = ::GlobalGameData_obj::vGod->x;
HXDLIN(  38)		Float _hx_tmp1 = (_hx_tmp + ((Float)::GlobalGameData_obj::vGod->get_width() / (Float)(int)2));
HXDLIN(  38)		Float _hx_tmp2 = ::GlobalGameData_obj::vGod->y;
HXDLIN(  38)		proj->shoot(_hx_tmp1,(_hx_tmp2 + ((Float)::GlobalGameData_obj::vGod->get_height() / (Float)(int)2)));
HXLINE(  39)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SkillLogicProjectil_obj,skillExecution,return )

void SkillLogicProjectil_obj::skillReset(){
            	HX_STACKFRAME(&_hx_pos_bb7d026a6de5e9fe_44_skillReset)
HXDLIN(  44)		int _g = (int)0;
HXDLIN(  44)		while((_g < (int)1)){
HXDLIN(  44)			_g = (_g + (int)1);
HXDLIN(  44)			int i = (_g - (int)1);
HXLINE(  46)			Dynamic( this->vProjectiles->members->__get(i)).StaticCast<  ::flixel::FlxBasic >()->kill();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(SkillLogicProjectil_obj,skillReset,(void))

void SkillLogicProjectil_obj::skillUpdateValidation(){
            	HX_STACKFRAME(&_hx_pos_bb7d026a6de5e9fe_51_skillUpdateValidation)
            	}


HX_DEFINE_DYNAMIC_FUNC0(SkillLogicProjectil_obj,skillUpdateValidation,(void))


hx::ObjectPtr< SkillLogicProjectil_obj > SkillLogicProjectil_obj::__new(::String aTextDescription) {
	hx::ObjectPtr< SkillLogicProjectil_obj > __this = new SkillLogicProjectil_obj();
	__this->__construct(aTextDescription);
	return __this;
}

hx::ObjectPtr< SkillLogicProjectil_obj > SkillLogicProjectil_obj::__alloc(hx::Ctx *_hx_ctx,::String aTextDescription) {
	SkillLogicProjectil_obj *__this = (SkillLogicProjectil_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SkillLogicProjectil_obj), true, "skill.SkillLogicProjectil"));
	*(void **)__this = SkillLogicProjectil_obj::_hx_vtable;
	__this->__construct(aTextDescription);
	return __this;
}

SkillLogicProjectil_obj::SkillLogicProjectil_obj()
{
}

void SkillLogicProjectil_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SkillLogicProjectil);
	HX_MARK_MEMBER_NAME(vProjectiles,"vProjectiles");
	HX_MARK_MEMBER_NAME(vTextDescription,"vTextDescription");
	HX_MARK_MEMBER_NAME(vSkillButton,"vSkillButton");
	HX_MARK_END_CLASS();
}

void SkillLogicProjectil_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(vProjectiles,"vProjectiles");
	HX_VISIT_MEMBER_NAME(vTextDescription,"vTextDescription");
	HX_VISIT_MEMBER_NAME(vSkillButton,"vSkillButton");
}

hx::Val SkillLogicProjectil_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"skillReset") ) { return hx::Val( skillReset_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"vProjectiles") ) { return hx::Val( vProjectiles ); }
		if (HX_FIELD_EQ(inName,"vSkillButton") ) { return hx::Val( vSkillButton ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"skillExecution") ) { return hx::Val( skillExecution_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"vTextDescription") ) { return hx::Val( vTextDescription ); }
		if (HX_FIELD_EQ(inName,"preparationSkill") ) { return hx::Val( preparationSkill_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"skillUpdateValidation") ) { return hx::Val( skillUpdateValidation_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SkillLogicProjectil_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"vProjectiles") ) { vProjectiles=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vSkillButton") ) { vSkillButton=inValue.Cast<  ::skill::FlxButtonAnimationSkill >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"vTextDescription") ) { vTextDescription=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SkillLogicProjectil_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("vProjectiles","\x94","\xc5","\xf8","\x67"));
	outFields->push(HX_HCSTRING("vTextDescription","\x79","\x65","\x6d","\x41"));
	outFields->push(HX_HCSTRING("vSkillButton","\x8d","\x8d","\x48","\xb5"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SkillLogicProjectil_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::group::FlxTypedGroup*/ ,(int)offsetof(SkillLogicProjectil_obj,vProjectiles),HX_HCSTRING("vProjectiles","\x94","\xc5","\xf8","\x67")},
	{hx::fsString,(int)offsetof(SkillLogicProjectil_obj,vTextDescription),HX_HCSTRING("vTextDescription","\x79","\x65","\x6d","\x41")},
	{hx::fsObject /*::skill::FlxButtonAnimationSkill*/ ,(int)offsetof(SkillLogicProjectil_obj,vSkillButton),HX_HCSTRING("vSkillButton","\x8d","\x8d","\x48","\xb5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SkillLogicProjectil_obj_sStaticStorageInfo = 0;
#endif

static ::String SkillLogicProjectil_obj_sMemberFields[] = {
	HX_HCSTRING("vProjectiles","\x94","\xc5","\xf8","\x67"),
	HX_HCSTRING("vTextDescription","\x79","\x65","\x6d","\x41"),
	HX_HCSTRING("vSkillButton","\x8d","\x8d","\x48","\xb5"),
	HX_HCSTRING("preparationSkill","\x3a","\x3d","\xf4","\x17"),
	HX_HCSTRING("skillExecution","\xc7","\xbb","\xf6","\x62"),
	HX_HCSTRING("skillReset","\x7e","\x56","\x9a","\x35"),
	HX_HCSTRING("skillUpdateValidation","\x53","\x3f","\x46","\x75"),
	::String(null()) };

static void SkillLogicProjectil_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SkillLogicProjectil_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SkillLogicProjectil_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SkillLogicProjectil_obj::__mClass,"__mClass");
};

#endif

hx::Class SkillLogicProjectil_obj::__mClass;

void SkillLogicProjectil_obj::__register()
{
	hx::Object *dummy = new SkillLogicProjectil_obj;
	SkillLogicProjectil_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("skill.SkillLogicProjectil","\xb2","\x17","\x30","\xa4");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SkillLogicProjectil_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SkillLogicProjectil_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SkillLogicProjectil_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SkillLogicProjectil_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SkillLogicProjectil_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SkillLogicProjectil_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace skill
